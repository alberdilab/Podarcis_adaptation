[["index.html", "AlberdiLab | Martin-Bideguren et al. 2024 Study title to be added Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Martin-Bideguren et al. 2024 Study title to be added Garazi Martin-Bideguren1, Ostaizka Aizpurua2, Carlos Cabido3 and Antton Alberdi4 Last update: 2024-05-01 Chapter 1 Introduction This webbook contains all the code used for data analysis in study of the individual-level metagenomic data of Podarcis muralis and Podarcis liolepis lizards from different environments during an experimental setup. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/Podarcis_adaptation.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(broom.mixed) #library(lmerTest) library(Hmsc) library(corrplot) University of Copenhagen, garazi.bideguren@sund.ku.dk↩︎ University of Copenhagen, ostaizka.aizpurua@sund.ku.dk↩︎ Sociedad de Ciencias Aranzadi-Departamento de Herpetología, ccabido@aranzadi.eus↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["prepare-data.html", "Chapter 2 Prepare data 2.1 Load data 2.2 Create working objects 2.3 Load data statistics 2.4 Prepare color scheme 2.5 Wrap working objects", " Chapter 2 Prepare data 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata (missing) sample_metadata &lt;- read_tsv(&quot;data/metadata.tsv&quot;) 2.1.2 Read counts read_counts_raw &lt;- read_tsv(&quot;data/genome.count.tsv&quot;) %&gt;% rename(genome=1) #Transformation of read_counts to combine data from both sequence rounds merge_and_rename &lt;- function(read_counts_raw) { read_counts_raw %&gt;% # Gather the columns into long format pivot_longer(cols = -genome, names_to = &quot;col&quot;) %&gt;% # Extract prefix mutate(prefix = gsub(&quot;^(.*?)_.*&quot;, &quot;\\\\1&quot;, col)) %&gt;% # Group by prefix and genome, then summarize group_by(prefix, genome) %&gt;% summarize(value = sum(value)) %&gt;% # Spread the data back to wide format pivot_wider(names_from = prefix, values_from = value) } read_counts &lt;- merge_and_rename(read_counts_raw) 2.1.3 Genome base hits genome_hits_raw &lt;- read_tsv(&quot;data/genome.covered_bases.tsv&quot;) %&gt;% rename(genome=1) #Transformation of genome_hits to combine data from both sequence rounds merge_and_rename &lt;- function(genome_hits_raw) { genome_hits_raw %&gt;% # Gather the columns into long format pivot_longer(cols = -genome, names_to = &quot;col&quot;) %&gt;% # Extract prefix mutate(prefix = gsub(&quot;^(.*?)_.*&quot;, &quot;\\\\1&quot;, col)) %&gt;% # Group by prefix and genome, then summarize group_by(prefix, genome) %&gt;% summarize(value = sum(value)) %&gt;% # Spread the data back to wide format pivot_wider(names_from = prefix, values_from = value) } genome_hits &lt;- merge_and_rename(genome_hits_raw) 2.1.4 Genome taxonomy genome_taxonomy &lt;- read_tsv(&quot;data/gtdbtk.summary.tsv&quot;) %&gt;% select(mag_id = user_genome, classification) %&gt;% separate( classification, into = c(&quot;domain&quot;, &quot;phylum&quot;, &quot;class&quot;, &quot;order&quot;, &quot;family&quot;, &quot;genus&quot;, &quot;species&quot;), sep = &quot;;&quot;) %&gt;% rename(genome=1) 2.1.5 Genome quality genome_quality &lt;- read_tsv(&quot;data/quality_report.tsv&quot;) %&gt;% select( genome = Name, completeness = Completeness, contamination = Contamination, length = Genome_Size, gc = GC_Content ) genome_quality&lt;-genome_quality %&gt;% mutate (genome=str_remove_all(genome,&quot;.fa&quot;)) #Filter MAGs with over 70% completeness and less than 10% contamination genome_quality &lt;- genome_quality %&gt;% filter(completeness &gt; 70 &amp; contamination &lt; 10) 2.1.6 Genome tree genome_tree &lt;- read_tree(&quot;data/gtdbtk.backbone.bac120.classify.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names #Filter genome_taxonomy to keep MAGs with over 70% completeness and less than 10% contamination genome_taxonomy &lt;- genome_taxonomy %&gt;% semi_join(genome_quality, by = &quot;genome&quot;) genome_tree &lt;- keep.tip(genome_tree, tip=genome_taxonomy$genome) # keep only MAG tips 2.1.7 Genome annotations genome_annotations &lt;- read_tsv(&quot;data/annotations.tsv&quot;) %&gt;% rename(gene=1, genome=2, contig=3) #Filter only the MAGs with over 70% completeness and less than 10% contamination genome_annotations &lt;- genome_annotations %&gt;% semi_join(genome_quality, by = &quot;genome&quot;) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Merge genome taxonomy and quality genome_metadata &lt;- genome_taxonomy %&gt;% inner_join(genome_quality,by=join_by(genome==genome)) #join quality 2.2.2 Calculate genome coverage #Filter genome_hits for the MAGs with over 70% completeness and less than 10% contamination genome_hits &lt;- genome_hits %&gt;% semi_join(genome_quality, by = &quot;genome&quot;) genome_coverage &lt;- genome_hits %&gt;% mutate(across(where(is.numeric), ~ ./genome_metadata$length)) 2.2.3 Filter reads by coverage #Filter read_counts for the MAGs with over 70% completeness and less than 10% contamination read_counts &lt;- read_counts %&gt;% semi_join(genome_quality, by = &quot;genome&quot;) min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.4 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.5 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19)) 2.3 Load data statistics 2.3.1 Raw reads raw_reads &lt;- &quot;data/multiqc_general_stats.txt&quot; %&gt;% read_tsv() %&gt;% select( sample = Sample, raw_reads = `total_sequences` ) %&gt;% mutate( sample = sample %&gt;% str_remove_all(&quot;_1$&quot;) %&gt;% str_remove_all(&quot;_2$&quot;) ) %&gt;% summarise(raw_reads = sum(raw_reads), .by = sample) 2.3.2 Quality-filtered reads fastp_reads &lt;- &quot;data/multiqc_general_stats.txt&quot; %&gt;% read_tsv() %&gt;% filter(str_detect(Sample, &quot;fastp&quot;)) %&gt;% select( sample = Sample, trimmed_reads = `total_sequences` ) %&gt;% mutate( sample = sample %&gt;% str_remove_all(&quot;_[u12]+$&quot;) %&gt;% str_remove_all(&quot;^fastp \\\\| &quot;) ) %&gt;% summarise(trimmed_reads = sum(trimmed_reads), .by = sample) 2.3.3 Host-mapped reads host_mapped &lt;- &quot;data/multiqc_general_stats.txt&quot; %&gt;% read_tsv() %&gt;% filter(!str_detect(Sample, &quot;fastp&quot;)) %&gt;% select( sample = Sample, host_mapped = `reads_mapped`, mapping_total = `raw_total_sequences` ) %&gt;% mutate( host_unmapped = mapping_total - host_mapped ) %&gt;% filter(!is.na(host_mapped)) %&gt;% separate( col = sample, into = c(&quot;host_name&quot;, &quot;sample&quot;), sep = &quot; \\\\| &quot; ) %&gt;% rename(mapped = host_mapped, unmapped = host_unmapped) %&gt;% select(-mapping_total) %&gt;% pivot_longer(-host_name:-sample) %&gt;% mutate( name = str_glue(&quot;{name}_{host_name}&quot;) ) %&gt;% select(-host_name) %&gt;% pivot_wider() 2.3.4 Prokaryotic fraction (mising, not done by the server) #singlem &lt;- #&quot;data/microbial_fraction.tsv&quot; %&gt;% #read_tsv() %&gt;% #distinct() %&gt;% #mutate( #sample = sample %&gt;% str_remove_all(&quot;_1$&quot;), #read_fraction = read_fraction %&gt;% str_remove(&quot;%&quot;) %&gt;% as.numeric(), #read_fraction = read_fraction / 100 #) %&gt;% #select( #sample, #singlem_prokaryotic_bases = bacterial_archaeal_bases, #singlem_metagenome_size = metagenome_size, #singlem_read_fraction = read_fraction, #) 2.3.5 MAG-mapped reads mag_mapping &lt;- &quot;data/contig.count.tsv&quot; %&gt;% read_tsv() %&gt;% pivot_longer(-sequence_id) %&gt;% summarise(value = sum(value), .by = &quot;name&quot;) %&gt;% rename(sample = name, mapped_mags = value) 2.3.6 Wrap data statistics data_stats &lt;- raw_reads %&gt;% left_join(fastp_reads) %&gt;% left_join(host_mapped) %&gt;% #left_join(singlem) %&gt;% #try to create this file left_join(mag_mapping) 2.4 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.5 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, data_stats, file = &quot;data/data.Rdata&quot;) "],["mag-catalogue.html", "Chapter 3 MAG catalogue 3.1 Genome phylogeny 3.2 Genome quality 3.3 Functional overview 3.4 Functional ordination", " Chapter 3 MAG catalogue load(&quot;data/data.Rdata&quot;) 3.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 3.2 Genome quality genome_metadata$completeness %&gt;% mean() [1] 92.98658 genome_metadata$completeness %&gt;% sd() [1] 7.170467 genome_metadata$contamination %&gt;% mean() [1] 2.154888 genome_metadata$contamination %&gt;% sd() [1] 2.194372 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 3.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 3.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["community-composition.html", "Chapter 4 Community composition 4.1 Taxonomy overview 4.2 Taxonomy boxplot 4.3 Alpha diversity 4.4 Beta diversity 4.5 Permanovas", " Chapter 4 Community composition load(&quot;data/data.Rdata&quot;) 4.1 Taxonomy overview 4.1.1 Stacked barplot genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == Tube_code)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts #mutate(individual=factor(individual,levels=c(&quot;Sg1&quot;,&quot;Sg2&quot;,&quot;Sg3&quot;,&quot;Sg4&quot;,&quot;Sg5&quot;,&quot;Sg6&quot;,&quot;Sg7&quot;,&quot;Sg8&quot;,&quot;Sg9&quot;,&quot;Sg10&quot;))) %&gt;% ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ type, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) 4.1.2 Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == Tube_code)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun, na.rm=TRUE),sd=sd(relabun, na.rm=TRUE)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_2oinzwbgxpzya6v4nome .table td.tinytable_css_kww1o11bkvjnri81rejc, .table th.tinytable_css_kww1o11bkvjnri81rejc { border-bottom: solid 0.1em #d3d8dc; } phylum mean sd p__Bacteroidota 0.376352935 0.205078492 p__Bacillota_A 0.250845368 0.165219604 p__Bacillota 0.116698680 0.146369286 p__Pseudomonadota 0.095767942 0.159976047 p__Campylobacterota 0.052429876 0.092626270 p__Verrucomicrobiota 0.029518627 0.072768229 p__Desulfobacterota 0.023304680 0.036356268 p__Actinomycetota 0.012917195 0.107880476 p__Chlamydiota 0.010449046 0.059349062 p__Fusobacteriota 0.010359534 0.028167393 p__Cyanobacteriota 0.009098787 0.016424861 p__Bacillota_C 0.004658039 0.006626014 p__Spirochaetota 0.003962784 0.012243051 p__Bacillota_B 0.002436629 0.004905803 p__Elusimicrobiota 0.001199879 0.006464719 phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + geom_jitter(alpha=0.5) + theme_minimal() + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) 4.2 Taxonomy boxplot 4.2.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == Tube_code)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun, na.rm=TRUE),sd=sd(relabun, na.rm=TRUE)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_8npbq7ruikztuh7kj1pu .table td.tinytable_css_tx6x5ovu0q76hvciqg69, .table th.tinytable_css_tx6x5ovu0q76hvciqg69 { border-bottom: solid 0.1em #d3d8dc; } family mean sd f__Bacteroidaceae 2.189238e-01 0.1404298747 f__Lachnospiraceae 1.389745e-01 0.1089608538 f__Tannerellaceae 1.016053e-01 0.0802366634 f__Helicobacteraceae 5.197482e-02 0.0922005028 f__Mycoplasmoidaceae 3.651280e-02 0.0753015455 f__Erysipelotrichaceae 3.461428e-02 0.0450141949 f__UBA3700 3.378612e-02 0.0555421417 f__Marinifilaceae 2.741603e-02 0.0272043836 f__ 2.740335e-02 0.0833966811 f__DTU072 2.668734e-02 0.0526713763 f__Rikenellaceae 2.665357e-02 0.0462652505 f__Enterobacteriaceae 2.660196e-02 0.0913429878 f__Coprobacillaceae 2.521928e-02 0.0887342893 f__Desulfovibrionaceae 2.330468e-02 0.0363562684 f__Ruminococcaceae 1.838184e-02 0.0427420605 f__LL51 1.738859e-02 0.0683714736 f__Rhizobiaceae 1.578130e-02 0.0766280394 f__UBA3830 1.560351e-02 0.0451659123 f__Mycobacteriaceae 1.228390e-02 0.1079320546 f__Akkermansiaceae 1.213003e-02 0.0315247341 f__Chlamydiaceae 1.044905e-02 0.0593490616 f__Fusobacteriaceae 1.035953e-02 0.0281673926 f__CAG-239 9.034415e-03 0.0150424841 f__Enterococcaceae 8.322037e-03 0.0463917038 f__Gastranaerophilaceae 7.638375e-03 0.0143794214 f__Oscillospiraceae 6.565519e-03 0.0077974910 f__UBA1997 6.303806e-03 0.0307918484 f__Streptococcaceae 6.291980e-03 0.0340225424 f__UBA1242 4.618700e-03 0.0152906152 f__Brevinemataceae 3.962784e-03 0.0122430505 f__Acutalibacteraceae 3.335081e-03 0.0108974502 f__UBA660 3.159125e-03 0.0138778160 f__Clostridiaceae 2.808963e-03 0.0170355922 f__RUG11792 2.784774e-03 0.0249664653 f__Peptococcaceae 2.436629e-03 0.0049058034 f__MGBC116941 2.134904e-03 0.0093302936 f__Acidaminococcaceae 1.921070e-03 0.0050068934 f__CAG-508 1.786832e-03 0.0063826540 f__Anaerovoracaceae 1.551174e-03 0.0036295746 f__Moraxellaceae 1.468042e-03 0.0096884882 f__RUG14156 1.460412e-03 0.0045605184 f__Staphylococcaceae 1.345783e-03 0.0050584305 f__Elusimicrobiaceae 1.199879e-03 0.0064647185 f__CAG-288 9.379861e-04 0.0059852367 f__Anaerotignaceae 8.884602e-04 0.0040242420 f__CALVMC01 7.428930e-04 0.0043360033 f__Eggerthellaceae 6.332937e-04 0.0021152288 f__Massilibacillaceae 6.162148e-04 0.0016267915 f__UBA1820 4.680638e-04 0.0012990360 f__Arcobacteraceae 4.550604e-04 0.0050029784 f__CAG-274 4.466884e-04 0.0021903937 f__Burkholderiaceae_C 3.656162e-04 0.0047810524 f__Muribaculaceae 3.575580e-04 0.0009726557 f__UBA932 3.379555e-04 0.0011520742 f__Hepatoplasmataceae 2.954146e-04 0.0038630477 f__Rhodobacteraceae 2.924483e-04 0.0038242573 f__Weeksellaceae 2.739210e-04 0.0031292133 f__Eubacteriaceae 1.627561e-04 0.0006691724 f__Sphingobacteriaceae 1.488164e-04 0.0012387571 f__Devosiaceae 1.472568e-04 0.0015006126 f__Pumilibacteraceae 1.262477e-04 0.0007602888 f__WRAU01 9.491039e-05 0.0012411144 f__Peptostreptococcaceae 2.260586e-05 0.0002956099 family_arrange &lt;- family_summary %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% pull() family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==Tube_code)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + geom_jitter(alpha=0.5) + facet_grid(.~type)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 4.2.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == Tube_code)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun, na.rm=TRUE),sd=sd(relabun, na.rm=TRUE)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_nandajpqnrr8ccpxwm91 .table td.tinytable_css_s20p08ekqpzd3jqzaog2, .table th.tinytable_css_s20p08ekqpzd3jqzaog2 { border-bottom: solid 0.1em #d3d8dc; } genus mean sd g__Bacteroides 1.337013e-01 0.0929327655 g__Parabacteroides 9.568074e-02 0.0803866834 g__Phocaeicola 6.854013e-02 0.0793558268 g__Mycoplasmoides 3.015602e-02 0.0749534641 g__Helicobacter_J 2.973811e-02 0.0592188466 g__Odoribacter 2.522456e-02 0.0267412147 g__Roseburia 2.356827e-02 0.0556733585 g__NHYM01 2.223671e-02 0.0792620634 g__Alistipes 2.182523e-02 0.0282922451 g__Coprobacillus 1.990305e-02 0.0873936500 g__Agrobacterium 1.578130e-02 0.0766280394 g__Corynebacterium 1.228390e-02 0.1079320546 g__Akkermansia 1.213003e-02 0.0315247341 g__Fusobacterium_A 1.026752e-02 0.0281722895 g__Kineothrix 8.698172e-03 0.0406735379 g__Proteus 8.556721e-03 0.0677872967 g__Dielma 8.477779e-03 0.0090773537 g__CAG-95 8.014504e-03 0.0203997532 g__JAAYNV01 7.901098e-03 0.0194443338 g__UBA866 7.175409e-03 0.0291873132 g__Desulfovibrio 6.936071e-03 0.0210368286 g__Enterococcus 6.919414e-03 0.0453969341 g__Ureaplasma 6.356785e-03 0.0137373135 g__Lactococcus 6.291980e-03 0.0340225424 g__Lacrimispora 5.993828e-03 0.0097829951 g__Parabacteroides_B 5.924566e-03 0.0099792665 g__CALXRO01 5.698293e-03 0.0306767185 g__Citrobacter 5.650169e-03 0.0332631355 g__NSJ-61 5.495080e-03 0.0197757124 g__Breznakia 5.440147e-03 0.0235692957 g__Clostridium_AQ 5.263895e-03 0.0121113284 g__Salmonella 5.073541e-03 0.0183551010 g__Bilophila 4.925550e-03 0.0088098210 g__Hungatella_A 4.755524e-03 0.0095127458 g__MGBC136627 4.313746e-03 0.0162110012 g__Escherichia 4.139378e-03 0.0264569200 g__UMGS1251 4.111189e-03 0.0072426766 g__Hungatella 4.068243e-03 0.0189714607 g__Clostridium_Q 3.965072e-03 0.0052000165 g__Brevinema 3.962784e-03 0.0122430505 g__Thomasclavelia 3.856935e-03 0.0108480346 g__Scatousia 3.607252e-03 0.0102197530 g__Enterocloster 3.578040e-03 0.0047221634 g__Mailhella 3.569833e-03 0.0101940649 g__Copromonas 3.557270e-03 0.0050035176 g__Ventrimonas 3.472264e-03 0.0070914148 g__Caccovivens 3.304213e-03 0.0121527504 g__Lawsonia 3.250547e-03 0.0116543597 g__Fournierella 3.179598e-03 0.0062039376 g__Limenecus 3.126281e-03 0.0065432982 g__MGBC133411 3.006834e-03 0.0074209199 g__Mucinivorans 2.866176e-03 0.0371005376 g__Sarcina 2.808963e-03 0.0170355922 g__Acetatifactor 2.706113e-03 0.0058179611 g__Eisenbergiella 2.665864e-03 0.0067990748 g__Bacteroides_G 2.651345e-03 0.0344120334 g__CAJLXD01 2.603014e-03 0.0087025932 g__Blautia 2.528781e-03 0.0061107674 g__C-19 2.248901e-03 0.0048466847 g__Butyricimonas 2.191467e-03 0.0049842986 g__Velocimicrobium 2.175479e-03 0.0066412559 g__CAZU01 2.170696e-03 0.0065598332 g__MGBC116941 2.134904e-03 0.0093302936 g__Intestinimonas 2.057548e-03 0.0039214573 g__Negativibacillus 2.044877e-03 0.0054857591 g__Rikenella 1.962168e-03 0.0036910712 g__Phascolarctobacterium 1.921070e-03 0.0050068934 g__RGIG6463 1.768909e-03 0.0039495868 g__JALFVM01 1.721982e-03 0.0038441918 g__Oscillibacter 1.492792e-03 0.0024898538 g__Pseudoflavonifractor 1.485397e-03 0.0027590442 g__Acinetobacter 1.468042e-03 0.0096884882 g__Citrobacter_A 1.376632e-03 0.0060011629 g__Staphylococcus 1.345783e-03 0.0050584305 g__RGIG4733 1.288541e-03 0.0040266511 g__UBA1436 1.199879e-03 0.0064647185 g__Lachnotalea 1.194066e-03 0.0048896855 g__Ruthenibacterium 1.187962e-03 0.0053331515 g__14-2 1.170787e-03 0.0095739735 g__Beduini 1.160220e-03 0.0025025910 g__Scatocola 1.108079e-03 0.0044726561 g__Faecisoma 1.072888e-03 0.0055281036 g__Enterococcus_A 1.071313e-03 0.0098572488 g__Faecimonas 9.764964e-04 0.0082595968 g__RGIG9287 9.526092e-04 0.0092684203 g__CAG-345 9.379861e-04 0.0059852367 g__Blautia_A 9.100332e-04 0.0028927770 g__RGIG1896 8.246024e-04 0.0062408705 g__CAG-269 7.889086e-04 0.0046906408 g__Marseille-P3106 7.845423e-04 0.0017535790 g__WRHT01 6.354364e-04 0.0026829604 g__Eggerthella 6.332937e-04 0.0021152288 g__IOR16 6.324101e-04 0.0020540977 g__Anaerotruncus 6.192165e-04 0.0016862064 g__RUG14156 6.079829e-04 0.0022026464 g__CHH4-2 6.073170e-04 0.0019890673 g__Serratia_A 5.792071e-04 0.0075741155 g__CAG-56 4.857941e-04 0.0016254203 g__Merdimorpha 4.680638e-04 0.0012990360 g__MGBC140009 4.624605e-04 0.0023930648 g__CALURL01 4.581073e-04 0.0016646244 g__Aliarcobacter 4.550604e-04 0.0050029784 g__Scatenecus 4.467347e-04 0.0019650337 g__RGIG8482 4.347613e-04 0.0029582243 g__Enterobacter 4.025794e-04 0.0041076314 g__Klebsiella 4.007019e-04 0.0048624260 g__Caccenecus 3.895102e-04 0.0017702443 g__Alcaligenes 3.656162e-04 0.0047810524 g__Plesiomonas 3.590755e-04 0.0026947991 g__HGM05232 3.575580e-04 0.0009726557 g__JAHHSE01 3.550107e-04 0.0014818046 g__Egerieousia 3.379555e-04 0.0011520742 g__Emergencia 3.373704e-04 0.0017351293 g__Enterococcus_B 3.313107e-04 0.0022138492 g__Stoquefichus 2.990680e-04 0.0020385612 g__Hepatoplasma 2.954146e-04 0.0038630477 g__Paracoccus 2.924483e-04 0.0038242573 g__Moheibacter 2.739210e-04 0.0031292133 g__Scatomorpha 2.610126e-04 0.0010128258 g__UBA7185 2.405856e-04 0.0014474682 g__Eubacterium 1.627561e-04 0.0006691724 g__Sphingobacterium 1.488164e-04 0.0012387571 g__Devosia 1.472568e-04 0.0015006126 g__Anaerosporobacter 1.437105e-04 0.0012673026 g__Caccomorpha 1.366945e-04 0.0010479478 g__UBA2658 1.292159e-04 0.0007163845 g__Protoclostridium 1.262477e-04 0.0007602888 g__Angelakisella 1.253643e-04 0.0009168117 g__Cetobacterium_A 9.201325e-05 0.0008667719 g__Rahnella 6.395024e-05 0.0008362579 g__Peptostreptococcus 2.260586e-05 0.0002956099 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() genus_summary %&gt;% left_join(genome_metadata %&gt;% select(genus,phylum) %&gt;% unique(),by=join_by(genus==genus)) %&gt;% left_join(sample_metadata,by=join_by(sample==Tube_code)) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors[-c(3,4,6,8)]) + geom_jitter(alpha=0.5) + facet_grid(.~type)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 4.3 Alpha diversity # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == Tube_code)) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% ggplot(aes(y = value, x = species, group=species, color=species, fill=species)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;species&quot;, breaks=c(&quot;cloaca&quot;,&quot;feces&quot;), labels=c(&quot;Cloaca&quot;,&quot;Faeces&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;)) + scale_fill_manual(name=&quot;Sample type&quot;, breaks=c(&quot;cloaca&quot;,&quot;feces&quot;), labels=c(&quot;Cloaca&quot;,&quot;Faeces&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;)) + facet_wrap(. ~ metric, scales = &quot;free&quot;, ncol=4) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) 4.4 Beta diversity beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, tree = genome_tree) beta_q1f &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, dist = dist) 4.5 Permanovas 4.5.0.1 Load required data sample_metadata&lt;-sample_metadata %&gt;% filter(Tube_code != &quot;AD35&quot;) meta &lt;- column_to_rownames(sample_metadata, &quot;Tube_code&quot;) 4.5.1 1. Are the wild populations similar? 4.5.1.1 Wild: P.muralis vs P.liolepis 4.5.1.2 Number of samples used [1] 28 beta_div_richness_wild&lt;-hillpair(data=wild.counts, q=0) beta_div_neutral_wild&lt;-hillpair(data=wild.counts, q=1) beta_div_phylo_wild&lt;-hillpair(data=wild.counts, q=1, tree=genome_tree) beta_div_func_wild&lt;-hillpair(data=wild.counts_func, q=1, dist=dist) 4.5.1.2.1 Neutral Df SumOfSqs R2 F Pr(&gt;F) species 1 2.018797 0.2566342 8.976049 0.001 Residual 26 5.847641 0.7433658 NA NA Total 27 7.866438 1.0000000 NA NA 4.5.1.2.2 Phylogenetic Df SumOfSqs R2 F Pr(&gt;F) species 1 0.3786052 0.2108638 6.947419 0.001 Residual 26 1.4168908 0.7891362 NA NA Total 27 1.7954960 1.0000000 NA NA 4.5.1.2.3 Functional Df SumOfSqs R2 F Pr(&gt;F) species 1 0.0787916 0.1594096 4.930642 0.074 Residual 26 0.4154800 0.8405904 NA NA Total 27 0.4942716 1.0000000 NA NA There is a significant difference between P.muralis and P.liolepis regarding their neutral and phylogenetic beta diversity but not in their functional part. However, their is a big part of the diversity over 70-80% that isn’t captured in the model. Maybe due to the difference at the individual level. Warning in get_plot_component(plot, &quot;guide-box&quot;): Multiple components found; returning the first one. To return all, use `return_all = TRUE`. Warning in get_plot_component(plot, &quot;guide-box&quot;): Multiple components found; returning the first one. To return all, use `return_all = TRUE`. There are some differences regarding neutral and phylogenetic beta diversity when comparing the 0_Wild samples between both species. 4.5.2 2. Do the antibiotics work? 4.5.2.1 Acclimation vs antibiotics 4.5.2.2 Number of samples used [1] 55 beta_div_neutral_treat&lt;-hillpair(data=treat.counts, q=1) beta_div_phylo_treat&lt;-hillpair(data=treat.counts, q=1, tree=genome_tree) beta_div_func_treat&lt;-hillpair(data=treat.counts_func, q=1, dist=dist) 4.5.2.2.1 Neutral Df SumOfSqs R2 F Pr(&gt;F) time_point 1 2.189257 0.1017464 8.979451 0.001 species 1 3.046568 0.1415902 12.495800 0.001 individual 26 9.941985 0.4620568 1.568386 0.001 Residual 26 6.338992 0.2946066 NA NA Total 54 21.516802 1.0000000 NA NA 4.5.2.2.2 Phylogenetic Df SumOfSqs R2 F Pr(&gt;F) time_point 1 2.1642230 0.2000313 18.460841 0.001 species 1 0.8686306 0.0802844 7.409427 0.001 individual 26 4.7385071 0.4379630 1.554596 0.005 Residual 26 3.0480626 0.2817214 NA NA Total 54 10.8194233 1.0000000 NA NA 4.5.2.2.3 Functional Df SumOfSqs R2 F Pr(&gt;F) time_point 1 2.2832796 0.3550091 33.1502018 0.001 species 1 0.0227598 0.0035387 0.3304425 0.703 individual 26 2.3347730 0.3630154 1.3037622 0.217 Residual 26 1.7907967 0.2784368 NA NA Total 54 6.4316092 1.0000000 NA NA Time_point is significantly different in all the 3 diversity metrics and the individual factor also in the neutral diversity metric. Warning in get_plot_component(plot, &quot;guide-box&quot;): Multiple components found; returning the first one. To return all, use `return_all = TRUE`. "],["comparison-between-fmt2-vs-post-fmt2.html", "Chapter 5 Comparison between FMT2 vs Post-FMT2", " Chapter 5 Comparison between FMT2 vs Post-FMT2 transplant3 &lt;- meta %&gt;% filter(time_point == &quot;4_Transplant2&quot; | time_point == &quot;6_Post-FMT2&quot;) transplant3.counts &lt;- temp_genome_counts[,which(colnames(temp_genome_counts) %in% rownames(transplant3))] identical(sort(colnames(transplant3.counts)),sort(as.character(rownames(transplant3)))) transplant3.counts_func &lt;- temp_genome_counts[,which(colnames(temp_genome_counts) %in% rownames(transplant3))] identical(sort(colnames(transplant3.counts_func)),sort(as.character(rownames(transplant3)))) transplant3_nmds &lt;- sample_metadata %&gt;% filter(time_point == &quot;4_Transplant2&quot; | time_point == &quot;6_Post-FMT2&quot;) beta_div_neutral_transplant3&lt;-hillpair(data=transplant3.counts, q=1) beta_div_phylo_transplant3&lt;-hillpair(data=transplant3.counts, q=1, tree=genome_tree) beta_div_func_transplant3&lt;-hillpair(data=transplant3.counts_func, q=1, dist=dist) Df SumOfSqs R2 F Pr(&gt;F) species 1 1.1035252 0.0842380 6.734701 0.001 time_point 1 0.7327432 0.0559342 4.471856 0.001 type 1 1.8565350 0.1417193 11.330241 0.001 individual 25 6.7855728 0.5179794 1.656466 0.001 Residual 16 2.6217058 0.2001290 NA NA Total 44 13.1000821 1.0000000 NA NA beta_neutral_nmds_transplant3 %&gt;% group_by(type) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x=NMDS1,y=NMDS2, color=type, shape=time_point)) + scale_color_manual(values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + geom_point(size=2) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2), alpha=0.2) + labs(y = &quot;NMDS2&quot;, x=&quot;NMDS1 \\n Neutral beta diversity&quot;) + theme_classic() + theme(legend.position=&quot;top&quot;) 5.0.0.1 Post-FMT2 post2 &lt;- meta %&gt;% filter(time_point == &quot;6_Post-FMT2&quot;) post2.counts &lt;- temp_genome_counts[,which(colnames(temp_genome_counts) %in% rownames(post2))] identical(sort(colnames(post2.counts)),sort(as.character(rownames(post2)))) post2.counts_func &lt;- temp_genome_counts[,which(colnames(temp_genome_counts) %in% rownames(post2))] identical(sort(colnames(post2.counts_func)),sort(as.character(rownames(post2)))) post2_nmds &lt;- sample_metadata %&gt;% filter(time_point == &quot;6_Post-FMT2&quot;) beta_div_neutral_post2&lt;-hillpair(data=post2.counts, q=1) beta_div_phylo_post2&lt;-hillpair(data=post2.counts, q=1, tree=genome_tree) beta_div_func_post2&lt;-hillpair(data=post2.counts_func, q=1, dist=dist) Df SumOfSqs R2 F Pr(&gt;F) species 1 0.9398968 0.1224370 4.112304 0.001 type 1 1.0227481 0.1332297 4.474800 0.001 Residual 25 5.7139316 0.7443333 NA NA Total 27 7.6765766 1.0000000 NA NA Df SumOfSqs R2 F Pr(&gt;F) species 1 0.1200820 0.1454923 4.647187 0.001 type 1 0.0592745 0.0718175 2.293931 0.030 Residual 25 0.6459931 0.7826902 NA NA Total 27 0.8253496 1.0000000 NA NA Df SumOfSqs R2 F Pr(&gt;F) species 1 0.0116738 0.0168395 0.4229082 0.512 type 1 -0.0085273 -0.0123007 -0.3089208 0.912 Residual 25 0.6900904 0.9954612 NA NA Total 27 0.6932368 1.0000000 NA NA p1&lt;-beta_neutral_nmds_post2 %&gt;% group_by(type) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x=NMDS1,y=NMDS2, color=type, shape=time_point)) + scale_color_manual(values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + geom_point(size=2) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2), alpha=0.2) + labs(y = &quot;NMDS2&quot;, x=&quot;NMDS1 \\n Neutral beta diversity&quot;) + theme_classic() + theme(legend.position=&quot;top&quot;) common_legend &lt;- cowplot::get_legend(p1) Warning in get_plot_component(plot, &quot;guide-box&quot;): Multiple components found; returning the first one. To return all, use `return_all = TRUE`. p1 &lt;- p1 + theme(legend.position = &quot;none&quot;) p2&lt;-beta_phylogenetic_nmds_post2 %&gt;% group_by(type) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x=NMDS1,y=NMDS2, color=type, shape=time_point)) + scale_color_manual(values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + geom_point(size=2) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2), alpha=0.2) + labs(y= element_blank (), x=&quot;NMDS1 \\n Phylogenetic beta diversity&quot;) + theme_classic() + theme(legend.position=&quot;none&quot;) p3&lt;-beta_functional_nmds_post2 %&gt;% group_by(type) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x=NMDS1,y=NMDS2, color=type, shape=time_point)) + scale_color_manual(values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + geom_point(size=2) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2), alpha=0.2) + labs(y= element_blank (), x=&quot;NMDS1 \\n Functional beta diversity&quot;) + theme_classic()+ theme(legend.position=&quot;none&quot;) blankPlot &lt;- ggplot()+geom_blank(aes(1,1)) + cowplot::theme_nothing() blankPlot_1 &lt;- ggplot()+geom_blank(aes(1,1)) + cowplot::theme_nothing() grid.arrange(arrangeGrob(blankPlot,common_legend,blankPlot_1,p1,p2,p3, ncol=3, nrow = 2,widths=c(2.3, 2.3, 2.3), heights = c(0.2, 2.5))) "],["functional-differences.html", "Chapter 6 Functional differences 6.1 Function level", " Chapter 6 Functional differences load(&quot;data/data.Rdata&quot;) # Aggregate bundle-level GIFTs into the compound level GIFTs_elements &lt;- to.elements(genome_gifts, GIFT_db) GIFTs_elements_filtered &lt;- GIFTs_elements[rownames(GIFTs_elements) %in% genome_counts$genome, ] GIFTs_elements_filtered &lt;- as.data.frame(GIFTs_elements_filtered) %&gt;% select_if(~ !is.numeric(.) || sum(.) != 0) elements &lt;- GIFTs_elements_filtered %&gt;% as.data.frame() # Aggregate element-level GIFTs into the function level GIFTs_functions &lt;- to.functions(GIFTs_elements_filtered, GIFT_db) functions &lt;- GIFTs_functions %&gt;% as.data.frame() # Aggregate function-level GIFTs into overall Biosynthesis, Degradation and Structural GIFTs GIFTs_domains &lt;- to.domains(GIFTs_functions, GIFT_db) domains &lt;- GIFTs_domains %&gt;% as.data.frame() # Get community-weighed average GIFTs per sample GIFTs_elements_community &lt;- to.community(GIFTs_elements_filtered, genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) GIFTs_functions_community &lt;- to.community(GIFTs_functions, genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) GIFTs_domains_community &lt;- to.community(GIFTs_domains, genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) uniqueGIFT_db&lt;- unique(GIFT_db[c(2,4,5,6)]) %&gt;% unite(&quot;Function&quot;,Function:Element, sep= &quot;_&quot;, remove=FALSE) 6.1 Function level GIFTs_functions_community %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;sample&quot;) %&gt;% pivot_longer(!sample,names_to=&quot;trait&quot;,values_to=&quot;gift&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == Tube_code)) %&gt;% ggplot(aes(x=trait,y=sample,fill=gift)) + geom_tile(colour=&quot;white&quot;, size=0.2)+ scale_fill_gradientn(colours=rev(c(&quot;#d53e4f&quot;, &quot;#f46d43&quot;, &quot;#fdae61&quot;, &quot;#fee08b&quot;, &quot;#e6f598&quot;, &quot;#abdda4&quot;, &quot;#ddf1da&quot;)))+ facet_grid(time_point+type ~ ., scales=&quot;free&quot;,space=&quot;free&quot;) "],["elements.html", "Chapter 7 Elements 7.1 Comparison of samples from the 6th Time_point (6_Post-FMT2) 7.2 Comparison of samples from the 0 Time_point (0_Wild)", " Chapter 7 Elements 7.1 Comparison of samples from the 6th Time_point (6_Post-FMT2) # Find numeric columns numeric_cols &lt;- sapply(element_gift_TM6, is.numeric) # Calculate column sums for numeric columns only col_sums_numeric &lt;- colSums(element_gift_TM6[, numeric_cols]) # Identify numeric columns with sums not equal to zero nonzero_numeric_cols &lt;- names(col_sums_numeric)[col_sums_numeric != 0] # Remove numeric columns with sums not equal to zero filtered_data &lt;- element_gift_TM6[, !numeric_cols | colnames(element_gift_TM6) %in% nonzero_numeric_cols] significant_elements_TM6 &lt;- filtered_data %&gt;% pivot_longer(-c(Tube_code,type), names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(p_value = wilcox.test(value ~ type, exact=FALSE)$p.value) %&gt;% mutate(p_adjust=p.adjust(p_value, method=&quot;BH&quot;)) %&gt;% filter(p_value &lt; 0.05) %&gt;% #take into account that p_value is used and not p_adjust left_join(.,uniqueGIFT_db[c(1,3)],by = join_by(trait == Code_element)) element_gift_t &lt;- element_gift_TM6 %&gt;% dplyr::select(-c(type)) %&gt;% t() %&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;trait&quot;) element_gift_filt &lt;- subset(element_gift_t, trait %in% significant_elements_TM6$trait) %&gt;% t() %&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;Tube_code&quot;)%&gt;% left_join(., sample_metadata_TM6[c(1,7)], by = join_by(Tube_code == Tube_code)) element_gift_filt %&gt;% dplyr::select(-Tube_code)%&gt;% group_by(type) %&gt;% summarise(across(everything(), mean))%&gt;% t() %&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;Elements&quot;) %&gt;% left_join(.,uniqueGIFT_db[c(1,3)],by = join_by(Elements == Code_element)) element_gift_names &lt;- element_gift_filt%&gt;% dplyr::select(-type)%&gt;% t() %&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;Elements&quot;) %&gt;% left_join(.,uniqueGIFT_db[c(1,3)],by = join_by(Elements == Code_element))%&gt;% dplyr::select(-Elements)%&gt;% dplyr::select(Function, everything())%&gt;% t()%&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;Tube_code&quot;)%&gt;% left_join(., sample_metadata_TM6[c(1,7)], by = join_by(Tube_code == Tube_code)) 7.1.1 Plot colNames &lt;- names(element_gift_names)[2:20] #always check names(element_gift_names) first to now were your traits finish for(i in colNames){ plt &lt;- ggplot(element_gift_names, aes(x=type, y=.data[[i]], color = type)) + geom_boxplot(alpha = 0.2, outlier.shape = NA, width = 0.3, show.legend = FALSE) + geom_jitter(width = 0.1, show.legend = TRUE) + theme_minimal() + theme( axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank()) print(plt) } 7.2 Comparison of samples from the 0 Time_point (0_Wild) sample_metadata_wild &lt;- sample_metadata%&gt;% filter(time_point == &quot;0_Wild&quot;) element_gift_wild &lt;- GIFTs_elements_community %&gt;% as.data.frame() %&gt;% rownames_to_column(., &quot;Tube_code&quot;) %&gt;% inner_join(., sample_metadata_wild[c(1,3)], by=&quot;Tube_code&quot;) # Find numeric columns numeric_cols &lt;- sapply(element_gift_wild, is.numeric) # Calculate column sums for numeric columns only col_sums_numeric &lt;- colSums(element_gift_wild[, numeric_cols]) # Identify numeric columns with sums not equal to zero nonzero_numeric_cols &lt;- names(col_sums_numeric)[col_sums_numeric != 0] # Remove numeric columns with sums not equal to zero filtered_data &lt;- element_gift_wild[, !numeric_cols | colnames(element_gift_wild) %in% nonzero_numeric_cols] significant_elements_wild &lt;- filtered_data %&gt;% pivot_longer(-c(Tube_code,species), names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(p_value = wilcox.test(value ~ species, exact=FALSE)$p.value) %&gt;% mutate(p_adjust=p.adjust(p_value, method=&quot;BH&quot;)) %&gt;% filter(p_adjust &lt; 0.05) %&gt;% left_join(.,uniqueGIFT_db[c(1,3)],by = join_by(trait == Code_element)) element_gift_t &lt;- element_gift_wild %&gt;% dplyr::select(-c(species)) %&gt;% t() %&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;trait&quot;) element_gift_filt &lt;- subset(element_gift_t, trait %in% significant_elements_wild$trait) %&gt;% t() %&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;Tube_code&quot;)%&gt;% left_join(., sample_metadata_wild[c(1,3)], by = join_by(Tube_code == Tube_code)) element_gift_filt %&gt;% dplyr::select(-Tube_code)%&gt;% group_by(species) %&gt;% summarise(across(everything(), mean))%&gt;% t() %&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;Elements&quot;) %&gt;% left_join(.,uniqueGIFT_db[c(1,3)],by = join_by(Elements == Code_element)) element_gift_names &lt;- element_gift_filt%&gt;% dplyr::select(-species)%&gt;% t() %&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;Elements&quot;) %&gt;% left_join(.,uniqueGIFT_db[c(1,3)],by = join_by(Elements == Code_element))%&gt;% dplyr::select(-Elements)%&gt;% dplyr::select(Function, everything())%&gt;% t()%&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;Tube_code&quot;)%&gt;% left_join(., sample_metadata_wild[c(1,3)], by = join_by(Tube_code == Tube_code)) 7.2.1 Plot colNames &lt;- names(element_gift_names)[2:34] #always check names(element_gift_names) first to know were your traits finish for(i in colNames){ plt &lt;- ggplot(element_gift_names, aes(x=species, y=.data[[i]], color = species)) + geom_boxplot(alpha = 0.2, outlier.shape = NA, width = 0.3, show.legend = FALSE) + geom_jitter(width = 0.1, show.legend = TRUE) + theme_minimal() + theme( axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank()) print(plt) } "],["functional-domains.html", "Chapter 8 Functional domains 8.1 Comparison of samples from the 6th Time_point (6_Post-FMT2) 8.2 Comparison of samples from the 0 Time_point (0_Wild) 8.3 Element level", " Chapter 8 Functional domains 8.1 Comparison of samples from the 6th Time_point (6_Post-FMT2) #Merge the functional domains with the metadata merge_gift_TM6 &lt;- GIFTs_domains_community %&gt;% as.data.frame() %&gt;% rownames_to_column(., &quot;Tube_code&quot;) %&gt;% inner_join(., sample_metadata_TM6, by=&quot;Tube_code&quot;) 8.1.1 Biosynthesis 8.1.2 Degradation 8.1.3 Structure 8.1.4 Overall 8.2 Comparison of samples from the 0 Time_point (0_Wild) #Merge the functional domains with the metadata merge_gift_wild&lt;- GIFTs_domains_community %&gt;% as.data.frame() %&gt;% rownames_to_column(., &quot;Tube_code&quot;) %&gt;% inner_join(., sample_metadata_wild, by=&quot;Tube_code&quot;) 8.2.1 Biosynthesis 8.2.2 Degradation 8.2.3 Structure 8.2.4 Overall 8.2.5 GIFT test visualisation GIFTs_functions_community %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% separate(sample, into = c(&quot;individual&quot;, &quot;type&quot;), sep = &quot;\\\\.&quot;) %&gt;% pivot_longer(-c(individual, type), names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% mutate(trait = case_when( trait %in% GIFT_db$Code_function ~ GIFT_db$Function[match(trait, GIFT_db$Code_function)], TRUE ~ trait )) %&gt;% mutate(trait=factor(trait,levels=unique(GIFT_db$Function))) %&gt;% ggplot(aes(x=value, y=type, group=type, fill=type, color=type)) + geom_boxplot() + scale_color_manual(name=&quot;Sample type&quot;, breaks=c(&quot;cloaca&quot;,&quot;feces&quot;), labels=c(&quot;Cloaca&quot;,&quot;Faeces&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;)) + scale_fill_manual(name=&quot;Sample type&quot;, breaks=c(&quot;cloaca&quot;,&quot;feces&quot;), labels=c(&quot;Cloaca&quot;,&quot;Faeces&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;)) + facet_grid(trait ~ ., space=&quot;free&quot;, scales=&quot;free&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), strip.text.y = element_text(angle = 0)) + labs(y=&quot;Traits&quot;,x=&quot;Metabolic capacity index&quot;) 8.3 Element level GIFTs_elements_community %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;sample&quot;) %&gt;% pivot_longer(!sample,names_to=&quot;trait&quot;,values_to=&quot;gift&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == Tube_code)) %&gt;% mutate(functionid = substr(trait, 1, 3)) %&gt;% mutate(trait = case_when( trait %in% GIFT_db$Code_element ~ GIFT_db$Element[match(trait, GIFT_db$Code_element)], TRUE ~ trait )) %&gt;% mutate(functionid = case_when( functionid %in% GIFT_db$Code_function ~ GIFT_db$Function[match(functionid, GIFT_db$Code_function)], TRUE ~ functionid )) %&gt;% mutate(trait=factor(trait,levels=unique(GIFT_db$Element))) %&gt;% mutate(functionid=factor(functionid,levels=unique(GIFT_db$Function))) %&gt;% ggplot(aes(x=sample,y=trait,fill=gift)) + geom_tile(colour=&quot;white&quot;, linewidth=0.2)+ scale_fill_gradientn(colours=rev(c(&quot;#d53e4f&quot;, &quot;#f46d43&quot;, &quot;#fdae61&quot;, &quot;#fee08b&quot;, &quot;#e6f598&quot;, &quot;#abdda4&quot;, &quot;#ddf1da&quot;)))+ facet_grid(functionid ~ type, scales=&quot;free&quot;,space=&quot;free&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), strip.text.y = element_text(angle = 0)) + labs(y=&quot;Traits&quot;,x=&quot;Samples&quot;,fill=&quot;GIFT&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
