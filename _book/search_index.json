[["index.html", "AlberdiLab | Martin-Bideguren et al. 2024 Study title to be added Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Martin-Bideguren et al. 2024 Study title to be added Garazi Martin-Bideguren1, Ostaizka Aizpurua2, Carlos Cabido3 and Antton Alberdi4 Last update: 2024-05-23 Chapter 1 Introduction This webbook contains all the code used for data analysis in study of the individual-level metagenomic data of Podarcis muralis and Podarcis liolepis lizards from different environments during an experimental setup. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/Podarcis_adaptation.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(janitor) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(broom.mixed) library(corrplot) University of Copenhagen, garazi.bideguren@sund.ku.dk↩︎ University of Copenhagen, ostaizka.aizpurua@sund.ku.dk↩︎ Sociedad de Ciencias Aranzadi-Departamento de Herpetología, ccabido@aranzadi.eus↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["prepare-data.html", "Chapter 2 Prepare data 2.1 Load data 2.2 Create working objects 2.3 Filtering 2.4 Load data statistics 2.5 Prepare color scheme 2.6 Wrap working objects", " Chapter 2 Prepare data 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;data/metadata.tsv&quot;) 2.1.2 Read counts read_counts_raw &lt;- read_tsv(&quot;data/genome.count.tsv&quot;) %&gt;% rename(genome=1) #Transformation of read_counts to combine data from both sequence rounds merge_and_rename &lt;- function(read_counts_raw) { read_counts_raw %&gt;% # Gather the columns into long format pivot_longer(cols = -genome, names_to = &quot;col&quot;) %&gt;% # Extract prefix mutate(prefix = gsub(&quot;^(.*?)_.*&quot;, &quot;\\\\1&quot;, col)) %&gt;% # Group by prefix and genome, then summarize group_by(prefix, genome) %&gt;% summarize(value = sum(value)) %&gt;% # Spread the data back to wide format pivot_wider(names_from = prefix, values_from = value) } read_counts &lt;- merge_and_rename(read_counts_raw) 2.1.3 Genome base hits genome_hits_raw &lt;- read_tsv(&quot;data/genome.covered_bases.tsv&quot;) %&gt;% rename(genome=1) #Transformation of genome_hits to combine data from both sequence rounds merge_and_rename &lt;- function(genome_hits_raw) { genome_hits_raw %&gt;% # Gather the columns into long format pivot_longer(cols = -genome, names_to = &quot;col&quot;) %&gt;% # Extract prefix mutate(prefix = gsub(&quot;^(.*?)_.*&quot;, &quot;\\\\1&quot;, col)) %&gt;% # Group by prefix and genome, then summarize group_by(prefix, genome) %&gt;% summarize(value = sum(value)) %&gt;% # Spread the data back to wide format pivot_wider(names_from = prefix, values_from = value) } genome_hits &lt;- merge_and_rename(genome_hits_raw) 2.1.4 Genome taxonomy genome_taxonomy &lt;- read_tsv(&quot;data/gtdbtk.summary.tsv&quot;) %&gt;% select(mag_id = user_genome, classification) %&gt;% separate( classification, into = c(&quot;domain&quot;, &quot;phylum&quot;, &quot;class&quot;, &quot;order&quot;, &quot;family&quot;, &quot;genus&quot;, &quot;species&quot;), sep = &quot;;&quot;) %&gt;% rename(genome=1) 2.1.5 Genome quality genome_quality &lt;- read_tsv(&quot;data/quality_report.tsv&quot;) %&gt;% select( genome = Name, completeness = Completeness, contamination = Contamination, length = Genome_Size, gc = GC_Content ) genome_quality&lt;-genome_quality %&gt;% mutate (genome=str_remove_all(genome,&quot;.fa&quot;)) #Filter MAGs with over 70% completeness and less than 10% contamination genome_quality &lt;- genome_quality %&gt;% filter(completeness &gt; 70 &amp; contamination &lt; 10) 2.1.6 Genome tree genome_tree &lt;- read_tree(&quot;data/gtdbtk.backbone.bac120.classify.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names #Filter genome_taxonomy to keep MAGs with over 70% completeness and less than 10% contamination genome_taxonomy &lt;- genome_taxonomy %&gt;% semi_join(genome_quality, by = &quot;genome&quot;) genome_tree &lt;- keep.tip(genome_tree, tip=genome_taxonomy$genome) # keep only MAG tips 2.1.7 Genome annotations genome_annotations &lt;- read_tsv(&quot;data/annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) #Filter only the MAGs with over 70% completeness and less than 10% contamination genome_annotations &lt;- genome_annotations %&gt;% semi_join(genome_quality, by = &quot;genome&quot;) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Merge genome taxonomy and quality genome_metadata &lt;- genome_taxonomy %&gt;% inner_join(genome_quality,by=join_by(genome==genome)) #join quality 2.2.2 Calculate genome coverage #Filter genome_hits for the MAGs with over 70% completeness and less than 10% contamination genome_hits &lt;- genome_hits %&gt;% semi_join(genome_quality, by = &quot;genome&quot;) genome_coverage &lt;- genome_hits %&gt;% mutate(across(where(is.numeric), ~ ./genome_metadata$length)) 2.3 Filtering Four samples are removed from the analysis due to their low sequencing depth. #Counts_raw columns_to_exclude &lt;- c(&quot;AD23&quot;, &quot;AD25&quot;, &quot;AD69&quot;, &quot;AD91&quot;) # Columns to exclude read_counts &lt;- read_counts %&gt;% select(-columns_to_exclude) #Metadata sample_metadata &lt;- sample_metadata %&gt;% filter(Tube_code != &quot;AD23&quot;) %&gt;% filter(Tube_code != &quot;AD25&quot;) %&gt;% filter(Tube_code != &quot;AD69&quot;) %&gt;% filter(Tube_code != &quot;AD91&quot;) #Coverage_table columns_to_exclude &lt;- c(&quot;AD23&quot;, &quot;AD25&quot;, &quot;AD69&quot;, &quot;AD91&quot;) # Columns to exclude genome_coverage &lt;- genome_coverage %&gt;% select(-columns_to_exclude) 2.3.1 Filter reads by coverage #Filter read_counts for the MAGs with over 70% completeness and less than 10% contamination read_counts &lt;- read_counts %&gt;% semi_join(genome_quality, by = &quot;genome&quot;) min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.3.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.3.3 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19)) Calculating GIFTs for 313 genomes: AH1_2nd_10:bin_000001 (1/313) AH1_2nd_10:bin_000007 (2/313) AH1_2nd_10:bin_000009 (3/313) AH1_2nd_10:bin_000010 (4/313) AH1_2nd_10:bin_000018 (5/313) AH1_2nd_10:bin_000025 (6/313) AH1_2nd_10:bin_000040 (7/313) AH1_2nd_10:bin_000041 (8/313) AH1_2nd_10:bin_000042 (9/313) AH1_2nd_10:bin_000044 (10/313) AH1_2nd_10:bin_000049 (11/313) AH1_2nd_10:bin_000050 (12/313) AH1_2nd_10:bin_000051 (13/313) AH1_2nd_10:bin_000060 (14/313) AH1_2nd_10:bin_000069 (15/313) AH1_2nd_10:bin_000084 (16/313) AH1_2nd_10:bin_000097 (17/313) AH1_2nd_11:bin_000004 (18/313) AH1_2nd_11:bin_000005 (19/313) AH1_2nd_11:bin_000008 (20/313) AH1_2nd_11:bin_000009 (21/313) AH1_2nd_11:bin_000028 (22/313) AH1_2nd_12:bin_000001 (23/313) AH1_2nd_12:bin_000007 (24/313) AH1_2nd_12:bin_000008 (25/313) AH1_2nd_12:bin_000009 (26/313) AH1_2nd_12:bin_000012 (27/313) AH1_2nd_12:bin_000014 (28/313) AH1_2nd_12:bin_000015 (29/313) AH1_2nd_12:bin_000018 (30/313) AH1_2nd_12:bin_000019 (31/313) AH1_2nd_12:bin_000041 (32/313) AH1_2nd_12:bin_000044 (33/313) AH1_2nd_12:bin_000056 (34/313) AH1_2nd_12:bin_000059 (35/313) AH1_2nd_12:bin_000063 (36/313) AH1_2nd_13:bin_000004 (37/313) AH1_2nd_13:bin_000011 (38/313) AH1_2nd_13:bin_000025 (39/313) AH1_2nd_13:bin_000029 (40/313) AH1_2nd_13:bin_000037 (41/313) AH1_2nd_13:bin_000049 (42/313) AH1_2nd_13:bin_000050 (43/313) AH1_2nd_13:bin_000055 (44/313) AH1_2nd_14:bin_000003 (45/313) AH1_2nd_14:bin_000005 (46/313) AH1_2nd_14:bin_000014 (47/313) AH1_2nd_14:bin_000015 (48/313) AH1_2nd_14:bin_000020 (49/313) AH1_2nd_14:bin_000027 (50/313) AH1_2nd_14:bin_000032 (51/313) AH1_2nd_14:bin_000047 (52/313) AH1_2nd_14:bin_000052 (53/313) AH1_2nd_14:bin_000063 (54/313) AH1_2nd_15:bin_000001 (55/313) AH1_2nd_15:bin_000002 (56/313) AH1_2nd_15:bin_000004 (57/313) AH1_2nd_15:bin_000009 (58/313) AH1_2nd_15:bin_000013 (59/313) AH1_2nd_15:bin_000021 (60/313) AH1_2nd_15:bin_000025 (61/313) AH1_2nd_15:bin_000043 (62/313) AH1_2nd_16:bin_000008 (63/313) AH1_2nd_16:bin_000011 (64/313) AH1_2nd_16:bin_000018 (65/313) AH1_2nd_16:bin_000019 (66/313) AH1_2nd_16:bin_000020 (67/313) AH1_2nd_16:bin_000023 (68/313) AH1_2nd_16:bin_000025 (69/313) AH1_2nd_16:bin_000033 (70/313) AH1_2nd_16:bin_000044 (71/313) AH1_2nd_16:bin_000045 (72/313) AH1_2nd_16:bin_000047 (73/313) AH1_2nd_16:bin_000058 (74/313) AH1_2nd_16:bin_000064 (75/313) AH1_2nd_16:bin_000096 (76/313) AH1_2nd_16:bin_000100 (77/313) AH1_2nd_17:bin_000010 (78/313) AH1_2nd_17:bin_000015 (79/313) AH1_2nd_17:bin_000019 (80/313) AH1_2nd_17:bin_000020 (81/313) AH1_2nd_17:bin_000023 (82/313) AH1_2nd_17:bin_000029 (83/313) AH1_2nd_17:bin_000030 (84/313) AH1_2nd_17:bin_000038 (85/313) AH1_2nd_17:bin_000040 (86/313) AH1_2nd_18:bin_000011 (87/313) AH1_2nd_18:bin_000013 (88/313) AH1_2nd_18:bin_000024 (89/313) AH1_2nd_18:bin_000033 (90/313) AH1_2nd_18:bin_000039 (91/313) AH1_2nd_18:bin_000040 (92/313) AH1_2nd_18:bin_000041 (93/313) AH1_2nd_18:bin_000047 (94/313) AH1_2nd_19:bin_000001 (95/313) AH1_2nd_19:bin_000005 (96/313) AH1_2nd_19:bin_000011 (97/313) AH1_2nd_19:bin_000017 (98/313) AH1_2nd_19:bin_000024 (99/313) AH1_2nd_19:bin_000031 (100/313) AH1_2nd_19:bin_000032 (101/313) AH1_2nd_19:bin_000037 (102/313) AH1_2nd_19:bin_000038 (103/313) AH1_2nd_19:bin_000043 (104/313) AH1_2nd_19:bin_000050 (105/313) AH1_2nd_19:bin_000052 (106/313) AH1_2nd_19:bin_000053 (107/313) AH1_2nd_19:bin_000055 (108/313) AH1_2nd_19:bin_000067 (109/313) AH1_2nd_19:bin_000072 (110/313) AH1_2nd_1:bin_000001 (111/313) AH1_2nd_1:bin_000002 (112/313) AH1_2nd_1:bin_000003 (113/313) AH1_2nd_1:bin_000005 (114/313) AH1_2nd_1:bin_000006 (115/313) AH1_2nd_1:bin_000015 (116/313) AH1_2nd_1:bin_000023 (117/313) AH1_2nd_1:bin_000028 (118/313) AH1_2nd_1:bin_000034 (119/313) AH1_2nd_1:bin_000039 (120/313) AH1_2nd_1:bin_000048 (121/313) AH1_2nd_20:bin_000002 (122/313) AH1_2nd_20:bin_000003 (123/313) AH1_2nd_20:bin_000004 (124/313) AH1_2nd_20:bin_000006 (125/313) AH1_2nd_20:bin_000008 (126/313) AH1_2nd_20:bin_000009 (127/313) AH1_2nd_20:bin_000014 (128/313) AH1_2nd_20:bin_000016 (129/313) AH1_2nd_20:bin_000024 (130/313) AH1_2nd_20:bin_000025 (131/313) AH1_2nd_20:bin_000027 (132/313) AH1_2nd_20:bin_000031 (133/313) AH1_2nd_20:bin_000037 (134/313) AH1_2nd_20:bin_000040 (135/313) AH1_2nd_20:bin_000041 (136/313) AH1_2nd_20:bin_000042 (137/313) AH1_2nd_20:bin_000046 (138/313) AH1_2nd_20:bin_000053 (139/313) AH1_2nd_20:bin_000054 (140/313) AH1_2nd_20:bin_000061 (141/313) AH1_2nd_20:bin_000073 (142/313) AH1_2nd_20:bin_000075 (143/313) AH1_2nd_20:bin_000087 (144/313) AH1_2nd_20:bin_000089 (145/313) AH1_2nd_2:bin_000001 (146/313) AH1_2nd_2:bin_000003 (147/313) AH1_2nd_2:bin_000017 (148/313) AH1_2nd_2:bin_000018 (149/313) AH1_2nd_2:bin_000034 (150/313) AH1_2nd_5:bin_000001 (151/313) AH1_2nd_5:bin_000002 (152/313) AH1_2nd_5:bin_000004 (153/313) AH1_2nd_5:bin_000005 (154/313) AH1_2nd_5:bin_000006 (155/313) AH1_2nd_5:bin_000016 (156/313) AH1_2nd_5:bin_000023 (157/313) AH1_2nd_5:bin_000037 (158/313) AH1_2nd_5:bin_000051 (159/313) AH1_2nd_5:bin_000054 (160/313) AH1_2nd_5:bin_000069 (161/313) AH1_2nd_5:bin_000073 (162/313) AH1_2nd_6:bin_000001 (163/313) AH1_2nd_6:bin_000002 (164/313) AH1_2nd_6:bin_000003 (165/313) AH1_2nd_6:bin_000004 (166/313) AH1_2nd_6:bin_000006 (167/313) AH1_2nd_6:bin_000017 (168/313) AH1_2nd_6:bin_000024 (169/313) AH1_2nd_6:bin_000030 (170/313) AH1_2nd_6:bin_000031 (171/313) AH1_2nd_6:bin_000035 (172/313) AH1_2nd_6:bin_000037 (173/313) AH1_2nd_6:bin_000043 (174/313) AH1_2nd_6:bin_000046 (175/313) AH1_2nd_6:bin_000058 (176/313) AH1_2nd_6:bin_000060 (177/313) AH1_2nd_6:bin_000062 (178/313) AH1_2nd_7:bin_000003 (179/313) AH1_2nd_7:bin_000004 (180/313) AH1_2nd_7:bin_000005 (181/313) AH1_2nd_7:bin_000006 (182/313) AH1_2nd_7:bin_000010 (183/313) AH1_2nd_7:bin_000011 (184/313) AH1_2nd_7:bin_000015 (185/313) AH1_2nd_7:bin_000017 (186/313) AH1_2nd_7:bin_000023 (187/313) AH1_2nd_7:bin_000027 (188/313) AH1_2nd_7:bin_000028 (189/313) AH1_2nd_7:bin_000036 (190/313) AH1_2nd_7:bin_000038 (191/313) AH1_2nd_7:bin_000041 (192/313) AH1_2nd_7:bin_000055 (193/313) AH1_2nd_7:bin_000060 (194/313) AH1_2nd_7:bin_000065 (195/313) AH1_2nd_7:bin_000070 (196/313) AH1_2nd_8:bin_000006 (197/313) AH1_2nd_8:bin_000007 (198/313) AH1_2nd_8:bin_000020 (199/313) AH1_2nd_8:bin_000022 (200/313) AH1_2nd_8:bin_000027 (201/313) AH1_2nd_8:bin_000042 (202/313) AH1_2nd_8:bin_000051 (203/313) AH1_2nd_8:bin_000056 (204/313) AH1_2nd_9:bin_000002 (205/313) AH1_2nd_9:bin_000006 (206/313) AH1_2nd_9:bin_000015 (207/313) AH1_2nd_9:bin_000023 (208/313) AH1_2nd_9:bin_000025 (209/313) AH1_2nd_9:bin_000035 (210/313) AH1_2nd_9:bin_000037 (211/313) AH1_2nd_9:bin_000039 (212/313) AH1_2nd_9:bin_000047 (213/313) AH1_2nd_9:bin_000061 (214/313) LI1_2nd_10:bin_000001 (215/313) LI1_2nd_10:bin_000017 (216/313) LI1_2nd_10:bin_000018 (217/313) LI1_2nd_10:bin_000026 (218/313) LI1_2nd_1:bin_000006 (219/313) LI1_2nd_1:bin_000010 (220/313) LI1_2nd_1:bin_000014 (221/313) LI1_2nd_1:bin_000022 (222/313) LI1_2nd_1:bin_000032 (223/313) LI1_2nd_1:bin_000052 (224/313) LI1_2nd_1:bin_000055 (225/313) LI1_2nd_2:bin_000001 (226/313) LI1_2nd_2:bin_000002 (227/313) LI1_2nd_2:bin_000004 (228/313) LI1_2nd_2:bin_000006 (229/313) LI1_2nd_2:bin_000007 (230/313) LI1_2nd_2:bin_000009 (231/313) LI1_2nd_2:bin_000019 (232/313) LI1_2nd_2:bin_000027 (233/313) LI1_2nd_2:bin_000030 (234/313) LI1_2nd_2:bin_000039 (235/313) LI1_2nd_2:bin_000048 (236/313) LI1_2nd_3:bin_000003 (237/313) LI1_2nd_3:bin_000005 (238/313) LI1_2nd_3:bin_000007 (239/313) LI1_2nd_3:bin_000015 (240/313) LI1_2nd_3:bin_000017 (241/313) LI1_2nd_4:bin_000001 (242/313) LI1_2nd_4:bin_000003 (243/313) LI1_2nd_4:bin_000010 (244/313) LI1_2nd_4:bin_000022 (245/313) LI1_2nd_4:bin_000024 (246/313) LI1_2nd_4:bin_000026 (247/313) LI1_2nd_4:bin_000034 (248/313) LI1_2nd_4:bin_000035 (249/313) LI1_2nd_4:bin_000036 (250/313) LI1_2nd_4:bin_000037 (251/313) LI1_2nd_4:bin_000041 (252/313) LI1_2nd_4:bin_000045 (253/313) LI1_2nd_4:bin_000052 (254/313) LI1_2nd_4:bin_000071 (255/313) LI1_2nd_5:bin_000007 (256/313) LI1_2nd_5:bin_000013 (257/313) LI1_2nd_5:bin_000023 (258/313) LI1_2nd_5:bin_000026 (259/313) LI1_2nd_5:bin_000031 (260/313) LI1_2nd_5:bin_000032 (261/313) LI1_2nd_5:bin_000037 (262/313) LI1_2nd_5:bin_000069 (263/313) LI1_2nd_6:bin_000001 (264/313) LI1_2nd_7:bin_000001 (265/313) LI1_2nd_7:bin_000005 (266/313) LI1_2nd_7:bin_000008 (267/313) LI1_2nd_7:bin_000009 (268/313) LI1_2nd_7:bin_000011 (269/313) LI1_2nd_7:bin_000012 (270/313) LI1_2nd_7:bin_000014 (271/313) LI1_2nd_7:bin_000016 (272/313) LI1_2nd_7:bin_000019 (273/313) LI1_2nd_7:bin_000020 (274/313) LI1_2nd_7:bin_000033 (275/313) LI1_2nd_7:bin_000038 (276/313) LI1_2nd_7:bin_000040 (277/313) LI1_2nd_7:bin_000042 (278/313) LI1_2nd_7:bin_000045 (279/313) LI1_2nd_7:bin_000051 (280/313) LI1_2nd_7:bin_000053 (281/313) LI1_2nd_7:bin_000056 (282/313) LI1_2nd_7:bin_000058 (283/313) LI1_2nd_7:bin_000060 (284/313) LI1_2nd_7:bin_000064 (285/313) LI1_2nd_7:bin_000070 (286/313) LI1_2nd_7:bin_000074 (287/313) LI1_2nd_7:bin_000078 (288/313) LI1_2nd_7:bin_000083 (289/313) LI1_2nd_8:bin_000001 (290/313) LI1_2nd_8:bin_000006 (291/313) LI1_2nd_8:bin_000013 (292/313) LI1_2nd_8:bin_000016 (293/313) LI1_2nd_8:bin_000019 (294/313) LI1_2nd_8:bin_000030 (295/313) LI1_2nd_8:bin_000033 (296/313) LI1_2nd_8:bin_000035 (297/313) LI1_2nd_8:bin_000038 (298/313) LI1_2nd_8:bin_000044 (299/313) LI1_2nd_8:bin_000045 (300/313) LI1_2nd_8:bin_000047 (301/313) LI1_2nd_8:bin_000048 (302/313) LI1_2nd_8:bin_000064 (303/313) LI1_2nd_8:bin_000065 (304/313) LI1_2nd_8:bin_000070 (305/313) LI1_2nd_8:bin_000077 (306/313) LI1_2nd_8:bin_000079 (307/313) LI1_2nd_9:bin_000002 (308/313) LI1_2nd_9:bin_000004 (309/313) LI1_2nd_9:bin_000007 (310/313) LI1_2nd_9:bin_000022 (311/313) LI1_2nd_9:bin_000023 (312/313) LI1_2nd_9:bin_000032 (313/313) Identifiers in the annotation table: 764 Identifiers in the database: 1547 Identifiers in both: 69 Percentage of annotation table identifiers used for distillation: 9.03% Percentage of database identifiers used for distillation: 4.46% 2.4 Load data statistics 2.4.1 Raw reads raw_reads &lt;- &quot;data/multiqc_general_stats.txt&quot; %&gt;% read_tsv() %&gt;% select( sample = Sample, raw_reads = `total_sequences` ) %&gt;% mutate( sample = sample %&gt;% str_remove_all(&quot;_1$&quot;) %&gt;% str_remove_all(&quot;_2$&quot;) ) %&gt;% summarise(raw_reads = sum(raw_reads), .by = sample) 2.4.2 Quality-filtered reads fastp_reads &lt;- &quot;data/multiqc_general_stats.txt&quot; %&gt;% read_tsv() %&gt;% filter(str_detect(Sample, &quot;fastp&quot;)) %&gt;% select( sample = Sample, trimmed_reads = `total_sequences` ) %&gt;% mutate( sample = sample %&gt;% str_remove_all(&quot;_[u12]+$&quot;) %&gt;% str_remove_all(&quot;^fastp \\\\| &quot;) ) %&gt;% summarise(trimmed_reads = sum(trimmed_reads), .by = sample) 2.4.3 Host-mapped reads host_mapped &lt;- &quot;data/multiqc_general_stats.txt&quot; %&gt;% read_tsv() %&gt;% filter(!str_detect(Sample, &quot;fastp&quot;)) %&gt;% select( sample = Sample, host_mapped = `reads_mapped`, mapping_total = `raw_total_sequences` ) %&gt;% mutate( host_unmapped = mapping_total - host_mapped ) %&gt;% filter(!is.na(host_mapped)) %&gt;% separate( col = sample, into = c(&quot;host_name&quot;, &quot;sample&quot;), sep = &quot; \\\\| &quot; ) %&gt;% rename(mapped = host_mapped, unmapped = host_unmapped) %&gt;% select(-mapping_total) %&gt;% pivot_longer(-host_name:-sample) %&gt;% mutate( name = str_glue(&quot;{name}_{host_name}&quot;) ) %&gt;% select(-host_name) %&gt;% pivot_wider() 2.4.4 Prokaryotic fraction (mising, not done by the server) #singlem &lt;- #&quot;data/microbial_fraction.tsv&quot; %&gt;% #read_tsv() %&gt;% #distinct() %&gt;% #mutate( #sample = sample %&gt;% str_remove_all(&quot;_1$&quot;), #read_fraction = read_fraction %&gt;% str_remove(&quot;%&quot;) %&gt;% as.numeric(), #read_fraction = read_fraction / 100 #) %&gt;% #select( #sample, #singlem_prokaryotic_bases = bacterial_archaeal_bases, #singlem_metagenome_size = metagenome_size, #singlem_read_fraction = read_fraction, #) 2.4.5 MAG-mapped reads mag_mapping &lt;- read_tsv(&quot;data/contig.count.tsv.xz&quot;) %&gt;% pivot_longer(-sequence_id) %&gt;% summarise(value = sum(value), .by = &quot;name&quot;) %&gt;% rename(sample = name, mapped_mags = value) 2.4.6 Wrap data statistics data_stats &lt;- raw_reads %&gt;% left_join(fastp_reads) %&gt;% left_join(host_mapped) %&gt;% #left_join(singlem) %&gt;% #try to create this file left_join(mag_mapping) 2.5 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.6 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, data_stats, file = &quot;data/data.Rdata&quot;) "],["mag-catalogue.html", "Chapter 3 MAG catalogue 3.1 Genome phylogeny 3.2 Genome quality 3.3 Functional overview 3.4 Functional ordination", " Chapter 3 MAG catalogue load(&quot;data/data.Rdata&quot;) 3.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=3.4, y=0, label=&#39; Phylum&#39;, family=&#39;ArialMT&#39;, size=3.5) + annotate(&#39;text&#39;, x=4.2, y=0, label=&#39; Genome quality&#39;, family=&#39;ArialMT&#39;, size=3.5) + annotate(&#39;text&#39;, x=4.7, y=0, label=&#39; Genome size&#39;, family=&#39;ArialMT&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 3.2 Genome quality genome_metadata$completeness %&gt;% mean() [1] 92.98658 genome_metadata$completeness %&gt;% sd() [1] 7.170467 genome_metadata$contamination %&gt;% mean() [1] 2.154888 genome_metadata$contamination %&gt;% sd() [1] 2.194372 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 3.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 3.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["community-composition.html", "Chapter 4 Community composition 4.1 Taxonomy overview 4.2 Taxonomy boxplot 4.3 Alpha diversity 4.4 Beta diversity 4.5 Permanovas", " Chapter 4 Community composition load(&quot;data/data.Rdata&quot;) 4.1 Taxonomy overview 4.1.1 Stacked barplot # Merge data frames based on sample merged_data&lt;-genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == Tube_code)) %&gt;% #append sample metadata filter(count &gt; 0) #filter 0 counts # Create an interaction variable for time_point and sample merged_data$interaction_var &lt;- interaction(merged_data$sample, merged_data$time_point) ggplot(merged_data, aes(x=interaction_var,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ type, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;)+ scale_x_discrete(labels = function(x) gsub(&quot;.*\\\\.&quot;, &quot;&quot;, x)) + facet_wrap(~type, scales = &quot;free&quot;, labeller = as_labeller(function(label) gsub(&quot;.*\\\\.&quot;, &quot;&quot;, label))) #only show time_point label 4.1.2 Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == Tube_code)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun, na.rm=TRUE),sd=sd(relabun, na.rm=TRUE)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_fm1xnwgnjyqbi4jhbbzz .table td.tinytable_css_lbedlu8i64t92uau5p6s, .table th.tinytable_css_lbedlu8i64t92uau5p6s { border-bottom: solid 0.1em #d3d8dc; } phylum mean sd p__Bacteroidota 0.380806816 0.202118047 p__Bacillota_A 0.253813952 0.163904042 p__Bacillota 0.118079729 0.146679823 p__Pseudomonadota 0.096901291 0.160581847 p__Campylobacterota 0.053050348 0.092998130 p__Verrucomicrobiota 0.029867960 0.073128363 p__Desulfobacterota 0.023580475 0.036482484 p__Chlamydiota 0.010572704 0.059690269 p__Fusobacteriota 0.010482132 0.028311738 p__Cyanobacteriota 0.009206465 0.016492133 p__Bacillota_C 0.004713164 0.006645703 p__Spirochaetota 0.004009680 0.012308028 p__Bacillota_B 0.002465465 0.004927667 p__Actinomycetota 0.001235741 0.006346852 p__Elusimicrobiota 0.001214079 0.006501752 phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + geom_jitter(alpha=0.5) + theme_minimal() + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) 4.2 Taxonomy boxplot 4.2.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == Tube_code)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun, na.rm=TRUE),sd=sd(relabun, na.rm=TRUE)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_c3jpndvktgt6wbb9o51f .table td.tinytable_css_d3pvywlxpe775s46u6i6, .table th.tinytable_css_d3pvywlxpe775s46u6i6 { border-bottom: solid 0.1em #d3d8dc; } family mean sd f__Bacteroidaceae 2.215146e-01 0.1392048812 f__Lachnospiraceae 1.406192e-01 0.1085410432 f__Tannerellaceae 1.028077e-01 0.0799387840 f__Helicobacteraceae 5.258990e-02 0.0925721039 f__Mycoplasmoidaceae 3.694491e-02 0.0756423660 f__Erysipelotrichaceae 3.502391e-02 0.0451216980 f__UBA3700 3.418595e-02 0.0557485850 f__Marinifilaceae 2.774048e-02 0.0271999075 f__ 2.772765e-02 0.0838376915 f__DTU072 2.700317e-02 0.0529029477 f__Rikenellaceae 2.696900e-02 0.0464477971 f__Enterobacteriaceae 2.691677e-02 0.0918386902 f__Coprobacillaceae 2.551773e-02 0.0892179821 f__Desulfovibrionaceae 2.358047e-02 0.0364824837 f__Ruminococcaceae 1.859938e-02 0.0429483670 f__LL51 1.759437e-02 0.0687507595 f__Rhizobiaceae 1.596807e-02 0.0770633474 f__UBA3830 1.578817e-02 0.0454016753 f__Akkermansiaceae 1.227359e-02 0.0316838689 f__Chlamydiaceae 1.057270e-02 0.0596902690 f__Fusobacteriaceae 1.048213e-02 0.0283117384 f__CAG-239 9.141331e-03 0.0150992357 f__Enterococcaceae 8.420523e-03 0.0466580889 f__Gastranaerophilaceae 7.728770e-03 0.0144404459 f__Oscillospiraceae 6.643218e-03 0.0078105983 f__UBA1997 6.378408e-03 0.0309668631 f__Streptococcaceae 6.366441e-03 0.0342174908 f__UBA1242 4.673359e-03 0.0153730061 f__Brevinemataceae 4.009680e-03 0.0123080282 f__Acutalibacteraceae 3.374550e-03 0.0109560112 f__UBA660 3.196511e-03 0.0139558713 f__Clostridiaceae 2.842205e-03 0.0171339212 f__RUG11792 2.817729e-03 0.0251127757 f__Peptococcaceae 2.465465e-03 0.0049276669 f__MGBC116941 2.160169e-03 0.0093827415 f__Acidaminococcaceae 1.943804e-03 0.0050321931 f__CAG-508 1.807978e-03 0.0064175379 f__Anaerovoracaceae 1.569531e-03 0.0036471440 f__Moraxellaceae 1.485415e-03 0.0097446552 f__RUG14156 1.477695e-03 0.0045847831 f__Staphylococcaceae 1.361709e-03 0.0050863070 f__Elusimicrobiaceae 1.214079e-03 0.0065017516 f__CAG-288 9.490865e-04 0.0060198775 f__Anaerotignaceae 8.989745e-04 0.0040469504 f__CALVMC01 7.516846e-04 0.0043609744 f__Eggerthellaceae 6.407882e-04 0.0021266467 f__Massilibacillaceae 6.235073e-04 0.0016350480 f__Mycobacteriaceae 5.949530e-04 0.0060400054 f__UBA1820 4.736030e-04 0.0013057353 f__Arcobacteraceae 4.604457e-04 0.0050324221 f__CAG-274 4.519746e-04 0.0022028477 f__Burkholderiaceae_C 3.699430e-04 0.0048092594 f__Muribaculaceae 3.617894e-04 0.0009776409 f__UBA932 3.419549e-04 0.0011583178 f__Hepatoplasmataceae 2.989107e-04 0.0038858387 f__Rhodobacteraceae 2.959092e-04 0.0038468195 f__Weeksellaceae 2.771627e-04 0.0031476408 f__Eubacteriaceae 1.646822e-04 0.0006729067 f__Sphingobacteriaceae 1.505775e-04 0.0012460017 f__Devosiaceae 1.489995e-04 0.0015094318 f__Pumilibacteraceae 1.277418e-04 0.0007646754 f__WRAU01 9.603359e-05 0.0012484367 f__Peptostreptococcaceae 2.287338e-05 0.0002973539 family_arrange &lt;- family_summary %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% pull() family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==Tube_code)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + geom_jitter(alpha=0.5) + facet_grid(.~type)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 4.2.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == Tube_code)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun, na.rm=TRUE),sd=sd(relabun, na.rm=TRUE)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_3kwk147puanobjbv616b .table td.tinytable_css_d6bk6ll54wuase8peqam, .table th.tinytable_css_d6bk6ll54wuase8peqam { border-bottom: solid 0.1em #d3d8dc; } genus mean sd g__Bacteroides 1.352836e-01 0.0923254347 g__Parabacteroides 9.681305e-02 0.0801790006 g__Phocaeicola 6.935126e-02 0.0794715561 g__Mycoplasmoides 3.051289e-02 0.0753256189 g__Helicobacter_J 3.009004e-02 0.0594808174 g__Odoribacter 2.552307e-02 0.0267570773 g__Roseburia 2.384718e-02 0.0559439989 g__NHYM01 2.249986e-02 0.0796951054 g__Alistipes 2.208351e-02 0.0283591693 g__Coprobacillus 2.013859e-02 0.0878851683 g__Agrobacterium 1.596807e-02 0.0770633474 g__Akkermansia 1.227359e-02 0.0316838689 g__Fusobacterium_A 1.038903e-02 0.0283170720 g__Kineothrix 8.801109e-03 0.0409037874 g__Proteus 8.657984e-03 0.0681831315 g__Dielma 8.578108e-03 0.0090836958 g__CAG-95 8.109350e-03 0.0205019603 g__JAAYNV01 7.994602e-03 0.0195404994 g__UBA866 7.260325e-03 0.0293499698 g__Desulfovibrio 7.018155e-03 0.0211479806 g__Enterococcus 7.001300e-03 0.0456600395 g__Ureaplasma 6.432013e-03 0.0138012183 g__Lactococcus 6.366441e-03 0.0342174908 g__Lacrimispora 6.064761e-03 0.0098190433 g__Parabacteroides_B 5.994680e-03 0.0100174097 g__CALXRO01 5.765728e-03 0.0308524398 g__Citrobacter 5.717035e-03 0.0334547978 g__NSJ-61 5.560111e-03 0.0198839325 g__Breznakia 5.504528e-03 0.0237016548 g__Clostridium_AQ 5.326190e-03 0.0121695008 g__Salmonella 5.133583e-03 0.0184556360 g__Bilophila 4.983840e-03 0.0088456017 g__Hungatella_A 4.811802e-03 0.0095549574 g__MGBC136627 4.364796e-03 0.0163003355 g__Escherichia 4.188365e-03 0.0266100578 g__UMGS1251 4.159842e-03 0.0072716746 g__Hungatella 4.116388e-03 0.0190788279 g__Clostridium_Q 4.011996e-03 0.0052127439 g__Brevinema 4.009680e-03 0.0123080282 g__Thomasclavelia 3.902580e-03 0.0109042017 g__Scatousia 3.649941e-03 0.0102727788 g__Enterocloster 3.620384e-03 0.0047339282 g__Mailhella 3.612079e-03 0.0102470769 g__Copromonas 3.599368e-03 0.0050180473 g__Ventrimonas 3.513355e-03 0.0071233140 g__Caccovivens 3.343316e-03 0.0122194941 g__Lawsonia 3.289015e-03 0.0117180962 g__Fournierella 3.217226e-03 0.0062309921 g__Limenecus 3.163279e-03 0.0065731820 g__MGBC133411 3.042418e-03 0.0074576633 g__Mucinivorans 2.900095e-03 0.0373193950 g__Sarcina 2.842205e-03 0.0171339212 g__Acetatifactor 2.738138e-03 0.0058449483 g__Eisenbergiella 2.697412e-03 0.0068331645 g__Bacteroides_G 2.682722e-03 0.0346150378 g__CAJLXD01 2.633818e-03 0.0087495783 g__Blautia 2.558708e-03 0.0061407647 g__C-19 2.275515e-03 0.0048691968 g__Butyricimonas 2.217402e-03 0.0050081070 g__Velocimicrobium 2.201224e-03 0.0066764022 g__CAZU01 2.196385e-03 0.0065944622 g__MGBC116941 2.160169e-03 0.0093827415 g__Intestinimonas 2.081898e-03 0.0039382613 g__Negativibacillus 2.069077e-03 0.0055137501 g__Rikenella 1.985389e-03 0.0037067264 g__Phascolarctobacterium 1.943804e-03 0.0050321931 g__RGIG6463 1.789843e-03 0.0039682804 g__JALFVM01 1.742360e-03 0.0038623852 g__Oscillibacter 1.510459e-03 0.0024992661 g__Pseudoflavonifractor 1.502976e-03 0.0027706264 g__Acinetobacter 1.485415e-03 0.0097446552 g__Citrobacter_A 1.392923e-03 0.0060348874 g__Staphylococcus 1.361709e-03 0.0050863070 g__RGIG4733 1.303790e-03 0.0040480788 g__UBA1436 1.214079e-03 0.0065017516 g__Lachnotalea 1.208197e-03 0.0049169585 g__Ruthenibacterium 1.202021e-03 0.0053632179 g__14-2 1.184643e-03 0.0096299356 g__Beduini 1.173950e-03 0.0025142208 g__Scatocola 1.121193e-03 0.0044975564 g__Faecisoma 1.085585e-03 0.0055596648 g__Enterococcus_A 1.083991e-03 0.0099150522 g__Faecimonas 9.880526e-04 0.0083079244 g__RGIG9287 9.638826e-04 0.0093228400 g__CAG-345 9.490865e-04 0.0060198775 g__Blautia_A 9.208028e-04 0.0029082304 g__RGIG1896 8.343610e-04 0.0062772562 g__CAG-269 7.982448e-04 0.0047176841 g__Marseille-P3106 7.938268e-04 0.0017618833 g__WRHT01 6.429563e-04 0.0026979819 g__Eggerthella 6.407882e-04 0.0021266467 g__IOR16 6.398942e-04 0.0020651222 g__Anaerotruncus 6.265445e-04 0.0016948517 g__RUG14156 6.151780e-04 0.0022147136 g__CHH4-2 6.145042e-04 0.0019997615 g__Corynebacterium 5.949530e-04 0.0060400054 g__Serratia_A 5.860616e-04 0.0076188009 g__CAG-56 4.915432e-04 0.0016341973 g__Merdimorpha 4.736030e-04 0.0013057353 g__MGBC140009 4.679334e-04 0.0024067320 g__CALURL01 4.635287e-04 0.0016737486 g__Aliarcobacter 4.604457e-04 0.0050324221 g__Scatenecus 4.520215e-04 0.0019760876 g__RGIG8482 4.399064e-04 0.0029753981 g__Enterobacter 4.073437e-04 0.0041317730 g__Klebsiella 4.054439e-04 0.0048910857 g__Caccenecus 3.941198e-04 0.0017802371 g__Alcaligenes 3.699430e-04 0.0048092594 g__Plesiomonas 3.633249e-04 0.0027105056 g__HGM05232 3.617894e-04 0.0009776409 g__JAHHSE01 3.592120e-04 0.0014900895 g__Egerieousia 3.419549e-04 0.0011583178 g__Emergencia 3.413630e-04 0.0017450341 g__Enterococcus_B 3.352316e-04 0.0022266910 g__Stoquefichus 3.026072e-04 0.0020503969 g__Hepatoplasma 2.989107e-04 0.0038858387 g__Paracoccus 2.959092e-04 0.0038468195 g__Moheibacter 2.771627e-04 0.0031476408 g__Scatomorpha 2.641015e-04 0.0010184339 g__UBA7185 2.434328e-04 0.0014558191 g__Eubacterium 1.646822e-04 0.0006729067 g__Sphingobacterium 1.505775e-04 0.0012460017 g__Devosia 1.489995e-04 0.0015094318 g__Anaerosporobacter 1.454112e-04 0.0012747262 g__Caccomorpha 1.383122e-04 0.0010540604 g__UBA2658 1.307451e-04 0.0007204965 g__Protoclostridium 1.277418e-04 0.0007646754 g__Angelakisella 1.268479e-04 0.0009221501 g__Cetobacterium_A 9.310217e-05 0.0008718575 g__Rahnella 6.470705e-05 0.0008411917 g__Peptostreptococcus 2.287338e-05 0.0002973539 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() genus_summary %&gt;% left_join(genome_metadata %&gt;% select(genus,phylum) %&gt;% unique(),by=join_by(genus==genus)) %&gt;% left_join(sample_metadata,by=join_by(sample==Tube_code)) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors[-c(3,4,6,8)]) + geom_jitter(alpha=0.5) + facet_grid(.~type)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 4.3 Alpha diversity # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) 4.3.1 Wild samples alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == Tube_code)) %&gt;% filter(time_point==&quot;0_Wild&quot;) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% ggplot(aes(y = value, x = species, group=species, color=species, fill=species)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;species&quot;, breaks=c(&quot;Podarcis_liolepis&quot;,&quot;Podarcis_muralis&quot;), labels=c(&quot;Podarcis liolepis&quot;,&quot;Podarcis muralis&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;)) + scale_fill_manual(name=&quot;species&quot;, breaks=c(&quot;Podarcis_liolepis&quot;,&quot;Podarcis_muralis&quot;), labels=c(&quot;Podarcis liolepis&quot;,&quot;Podarcis muralis&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;)) + facet_wrap(. ~ metric ) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1), # Increase plot size plot.title = element_text(size = 10), axis.text = element_text(size = 8), axis.title = element_text(size = 8) ) 4.3.2 Acclimation samples alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == Tube_code)) %&gt;% filter(time_point==&quot;1_Acclimation&quot;) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% ggplot(aes(y = value, x = species, group=species, color=species, fill=species)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;species&quot;, breaks=c(&quot;Podarcis_liolepis&quot;,&quot;Podarcis_muralis&quot;), labels=c(&quot;Podarcis liolepis&quot;,&quot;Podarcis muralis&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;)) + scale_fill_manual(name=&quot;species&quot;, breaks=c(&quot;Podarcis_liolepis&quot;,&quot;Podarcis_muralis&quot;), labels=c(&quot;Podarcis liolepis&quot;,&quot;Podarcis muralis&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;)) + facet_wrap(. ~ metric) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1), # Increase plot size plot.title = element_text(size = 10), axis.text = element_text(size = 8), axis.title = element_text(size = 8) ) 4.3.3 Antibiotics samples alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == Tube_code)) %&gt;% filter(time_point==&quot;2_Antibiotics&quot;) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% ggplot(aes(y = value, x = species, group=species, color=species, fill=species)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;species&quot;, breaks=c(&quot;Podarcis_liolepis&quot;,&quot;Podarcis_muralis&quot;), labels=c(&quot;Podarcis liolepis&quot;,&quot;Podarcis muralis&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;)) + scale_fill_manual(name=&quot;species&quot;, breaks=c(&quot;Podarcis_liolepis&quot;,&quot;Podarcis_muralis&quot;), labels=c(&quot;Podarcis liolepis&quot;,&quot;Podarcis muralis&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;)) + facet_wrap(. ~ metric) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1), # Increase plot size plot.title = element_text(size = 10), axis.text = element_text(size = 8), axis.title = element_text(size = 8) ) 4.3.4 Transplant_1 samples alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == Tube_code)) %&gt;% filter(time_point==&quot;3_Transplant1&quot;) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% ggplot(aes(y = value, x = type, group=type, color=type, fill=type)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;type&quot;, breaks=c(&quot;Control&quot;,&quot;Hot_control&quot;, &quot;Treatment&quot;), labels=c(&quot;Control&quot;,&quot;Hot control&quot;, &quot;Treatment&quot;), values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + scale_fill_manual(name=&quot;type&quot;, breaks=c(&quot;Control&quot;,&quot;Hot_control&quot;, &quot;Treatment&quot;), labels=c(&quot;Control&quot;,&quot;Hot control&quot;, &quot;Treatment&quot;), values=c(&quot;#76b18350&quot;,&quot;#d57d2c50&quot;, &quot;#4477AA50&quot;)) + facet_wrap(. ~ metric) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1), # Increase plot size plot.title = element_text(size = 10), axis.text = element_text(size = 8), axis.title = element_text(size = 8) ) 4.3.5 Transplant_2 samples alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == Tube_code)) %&gt;% filter(time_point==&quot;4_Transplant2&quot;) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% ggplot(aes(y = value, x = type, group=type, color=type, fill=type)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;type&quot;, breaks=c(&quot;Control&quot;,&quot;Hot_control&quot;, &quot;Treatment&quot;), labels=c(&quot;Control&quot;,&quot;Hot control&quot;, &quot;Treatment&quot;), values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + scale_fill_manual(name=&quot;type&quot;, breaks=c(&quot;Control&quot;,&quot;Hot_control&quot;, &quot;Treatment&quot;), labels=c(&quot;Control&quot;,&quot;Hot control&quot;, &quot;Treatment&quot;), values=c(&quot;#76b18350&quot;,&quot;#d57d2c50&quot;, &quot;#4477AA50&quot;)) + facet_wrap(. ~ metric) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1), # Increase plot size plot.title = element_text(size = 10), axis.text = element_text(size = 8), axis.title = element_text(size = 8) ) 4.3.6 Post-Transplant_1 samples alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == Tube_code)) %&gt;% filter(time_point==&quot;5_Post-FMT1&quot;) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% ggplot(aes(y = value, x = type, group=type, color=type, fill=type)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;type&quot;, breaks=c(&quot;Control&quot;,&quot;Hot_control&quot;, &quot;Treatment&quot;), labels=c(&quot;Control&quot;,&quot;Hot control&quot;, &quot;Treatment&quot;), values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + scale_fill_manual(name=&quot;type&quot;, breaks=c(&quot;Control&quot;,&quot;Hot_control&quot;, &quot;Treatment&quot;), labels=c(&quot;Control&quot;,&quot;Hot control&quot;, &quot;Treatment&quot;), values=c(&quot;#76b18350&quot;,&quot;#d57d2c50&quot;, &quot;#4477AA50&quot;)) + facet_wrap(. ~ metric) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1), # Increase plot size plot.title = element_text(size = 10), axis.text = element_text(size = 8), axis.title = element_text(size = 8) ) 4.3.7 Post-Transplant_2 samples alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == Tube_code)) %&gt;% filter(time_point==&quot;6_Post-FMT2&quot;) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% ggplot(aes(y = value, x = type, group=type, color=type, fill=type)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;type&quot;, breaks=c(&quot;Control&quot;,&quot;Hot_control&quot;, &quot;Treatment&quot;), labels=c(&quot;Control&quot;,&quot;Hot control&quot;, &quot;Treatment&quot;), values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + scale_fill_manual(name=&quot;type&quot;, breaks=c(&quot;Control&quot;,&quot;Hot_control&quot;, &quot;Treatment&quot;), labels=c(&quot;Control&quot;,&quot;Hot control&quot;, &quot;Treatment&quot;), values=c(&quot;#76b18350&quot;,&quot;#d57d2c50&quot;, &quot;#4477AA50&quot;)) + facet_wrap(. ~ metric) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1), # Increase plot size plot.title = element_text(size = 10), axis.text = element_text(size = 8), axis.title = element_text(size = 8) ) 4.4 Beta diversity beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, tree = genome_tree) beta_q1f &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, dist = dist) 4.5 Permanovas 4.5.0.1 Load required data meta &lt;- column_to_rownames(sample_metadata, &quot;Tube_code&quot;) 4.5.1 1. Are the wild populations similar? 4.5.1.1 Wild: P.muralis vs P.liolepis wild &lt;- meta %&gt;% filter(time_point == &quot;0_Wild&quot;) # Create a temporary modified version of genome_counts_filt temp_genome_counts &lt;- transform(genome_counts_filt, row.names = genome_counts_filt$genome) temp_genome_counts$genome &lt;- NULL wild.counts &lt;- temp_genome_counts[, which(colnames(temp_genome_counts) %in% rownames(wild))] identical(sort(colnames(wild.counts)), sort(as.character(rownames(wild)))) wild_nmds &lt;- sample_metadata %&gt;% filter(time_point == &quot;0_Wild&quot;) 4.5.1.2 Number of samples used [1] 28 beta_div_richness_wild&lt;-hillpair(data=wild.counts, q=0) beta_div_neutral_wild&lt;-hillpair(data=wild.counts, q=1) beta_div_phylo_wild&lt;-hillpair(data=wild.counts, q=1, tree=genome_tree) beta_div_func_wild&lt;-hillpair(data=wild.counts, q=1, dist=dist) 4.5.1.3 Richness Df SumOfSqs R2 F Pr(&gt;F) species 1 1.631953 0.207198 6.795072 0.001 Residual 26 6.244347 0.792802 NA NA Total 27 7.876300 1.000000 NA NA 4.5.1.4 Neutral Df SumOfSqs R2 F Pr(&gt;F) species 1 2.018797 0.2566342 8.976049 0.001 Residual 26 5.847641 0.7433658 NA NA Total 27 7.866438 1.0000000 NA NA 4.5.1.5 Phylogenetic Df SumOfSqs R2 F Pr(&gt;F) species 1 0.3786052 0.2108638 6.947419 0.001 Residual 26 1.4168908 0.7891362 NA NA Total 27 1.7954960 1.0000000 NA NA 4.5.1.6 Functional Df SumOfSqs R2 F Pr(&gt;F) species 1 0.0787916 0.1594096 4.930642 0.055 Residual 26 0.4154800 0.8405904 NA NA Total 27 0.4942716 1.0000000 NA NA beta_q0n_nmds_wild &lt;- beta_div_richness_wild$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE, trace=FALSE) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(wild_nmds, by = join_by(sample == Tube_code)) beta_q1n_nmds_wild &lt;- beta_div_neutral_wild$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE, trace=FALSE) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(wild_nmds, by = join_by(sample == Tube_code)) beta_q1p_nmds_wild &lt;- beta_div_phylo_wild$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(wild_nmds, by = join_by(sample == Tube_code)) Run 0 stress 0.1097679 Run 1 stress 0.1771389 Run 2 stress 0.1259489 Run 3 stress 0.1262095 Run 4 stress 0.1145929 Run 5 stress 0.1128822 Run 6 stress 0.09968334 ... New best solution ... Procrustes: rmse 0.03852643 max resid 0.1653868 Run 7 stress 0.1262096 Run 8 stress 0.09968337 ... Procrustes: rmse 0.0002813413 max resid 0.001055835 ... Similar to previous best Run 9 stress 0.09968337 ... Procrustes: rmse 2.367791e-05 max resid 9.033449e-05 ... Similar to previous best Run 10 stress 0.1023648 Run 11 stress 0.1418173 Run 12 stress 0.1459598 Run 13 stress 0.1128822 Run 14 stress 0.1128821 Run 15 stress 0.109768 Run 16 stress 0.1097679 Run 17 stress 0.1150472 Run 18 stress 0.1418172 Run 19 stress 0.0996833 ... New best solution ... Procrustes: rmse 0.0001005416 max resid 0.0003708553 ... Similar to previous best Run 20 stress 0.1146655 *** Best solution repeated 1 times beta_q1f_nmds_wild &lt;- beta_div_func_wild$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(wild_nmds, by = join_by(sample == Tube_code)) Run 0 stress 0.009648577 Run 1 stress 0.3850082 Run 2 stress 0.01084268 Run 3 stress 0.01244289 Run 4 stress 0.01680573 Run 5 stress 0.009809805 ... Procrustes: rmse 0.00479275 max resid 0.01792002 Run 6 stress 0.01264211 Run 7 stress 0.01727004 Run 8 stress 0.01216915 Run 9 stress 0.009861855 ... Procrustes: rmse 0.00754918 max resid 0.02964518 Run 10 stress 0.01063146 Run 11 stress 0.01222832 Run 12 stress 0.009626082 ... New best solution ... Procrustes: rmse 0.001585282 max resid 0.006344139 ... Similar to previous best Run 13 stress 0.01228255 Run 14 stress 0.01665427 Run 15 stress 0.0117692 Run 16 stress 0.01683303 Run 17 stress 0.01173211 Run 18 stress 0.01744907 Run 19 stress 0.014201 Run 20 stress 0.009863543 ... Procrustes: rmse 0.008240763 max resid 0.03147327 *** Best solution repeated 1 times 4.5.2 2. Do the antibiotics work? 4.5.2.1 Acclimation vs antibiotics treat &lt;- meta %&gt;% #antibiotics samples giving error when plotting filter(time_point == &quot;1_Acclimation&quot; | time_point == &quot;2_Antibiotics&quot;) temp_genome_counts &lt;- transform(genome_counts_filt, row.names = genome_counts_filt$genome) temp_genome_counts$genome &lt;- NULL treat.counts &lt;- temp_genome_counts[,which(colnames(temp_genome_counts) %in% rownames(treat))] identical(sort(colnames(treat.counts)),sort(as.character(rownames(treat)))) treat_nmds &lt;- sample_metadata %&gt;% filter(time_point == &quot;1_Acclimation&quot; | time_point == &quot;2_Antibiotics&quot;) 4.5.2.2 Number of samples used [1] 53 beta_div_richness_treat&lt;-hillpair(data=treat.counts, q=0) beta_div_neutral_treat&lt;-hillpair(data=treat.counts, q=1) beta_div_phylo_treat&lt;-hillpair(data=treat.counts, q=1, tree=genome_tree) beta_div_func_treat&lt;-hillpair(data=treat.counts, q=1, dist=dist) 4.5.2.2.1 Richness Df SumOfSqs R2 F Pr(&gt;F) time_point 1 2.033529 0.0957379 6.818959 0.001 species 1 2.327685 0.1095866 7.805342 0.001 individual 26 9.722175 0.4577167 1.253885 0.002 Residual 24 7.157208 0.3369589 NA NA Total 52 21.240598 1.0000000 NA NA 4.5.2.2.2 Neutral Df SumOfSqs R2 F Pr(&gt;F) time_point 1 2.168854 0.1067496 9.686182 0.001 species 1 3.090152 0.1520953 13.800733 0.001 individual 26 9.684304 0.4766554 1.663479 0.001 Residual 24 5.373891 0.2644996 NA NA Total 52 20.317201 1.0000000 NA NA 4.5.2.2.3 Phylogenetic Df SumOfSqs R2 F Pr(&gt;F) time_point 1 2.0671823 0.2208963 21.358337 0.001 species 1 0.8731487 0.0933035 9.021460 0.001 individual 26 4.0949687 0.4375828 1.627293 0.006 Residual 24 2.3228577 0.2482174 NA NA Total 52 9.3581574 1.0000000 NA NA 4.5.2.2.4 Functional Df SumOfSqs R2 F Pr(&gt;F) time_point 1 2.1253769 0.4009905 40.2325710 0.001 species 1 0.0070451 0.0013292 0.1333606 0.758 individual 26 1.9000410 0.3584768 1.3833480 0.199 Residual 24 1.2678545 0.2392035 NA NA Total 52 5.3003175 1.0000000 NA NA beta_richness_nmds_treat &lt;- beta_div_richness_treat$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(treat_nmds, by = c(&quot;sample&quot; = &quot;Tube_code&quot;)) beta_neutral_nmds_treat &lt;- beta_div_neutral_treat$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(treat_nmds, by = c(&quot;sample&quot; = &quot;Tube_code&quot;)) beta_phylo_nmds_treat &lt;- beta_div_phylo_treat$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(treat_nmds, by = join_by(sample == Tube_code)) beta_func_nmds_treat &lt;- beta_div_func_treat$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(treat_nmds, by = join_by(sample == Tube_code)) 4.5.3 3. Do the FMT work? 4.5.3.1 Comparison between FMT2 vs Post-FMT2 transplant3 &lt;- meta %&gt;% filter(time_point == &quot;4_Transplant2&quot; | time_point == &quot;6_Post-FMT2&quot;) transplant3.counts &lt;- temp_genome_counts[,which(colnames(temp_genome_counts) %in% rownames(transplant3))] identical(sort(colnames(transplant3.counts)),sort(as.character(rownames(transplant3)))) transplant3_nmds &lt;- sample_metadata %&gt;% filter(time_point == &quot;4_Transplant2&quot; | time_point == &quot;6_Post-FMT2&quot;) 4.5.3.2 Number of samples used [1] 53 beta_div_richness_transplant3&lt;-hillpair(data=transplant3.counts, q=0) beta_div_neutral_transplant3&lt;-hillpair(data=transplant3.counts, q=1) beta_div_phylo_transplant3&lt;-hillpair(data=transplant3.counts, q=1, tree=genome_tree) beta_div_func_transplant3&lt;-hillpair(data=transplant3.counts, q=1, dist=dist) 4.5.3.2.1 Richness Df SumOfSqs R2 F Pr(&gt;F) species 1 0.9809525 0.0778442 5.775712 0.001 time_point 1 0.7092107 0.0562799 4.175734 0.001 type 1 1.4479860 0.1149060 8.525540 0.001 individual 25 6.9157236 0.5488022 1.628753 0.001 Residual 15 2.5476146 0.2021678 NA NA Total 43 12.6014875 1.0000000 NA NA 4.5.3.2.2 Neutral Df SumOfSqs R2 F Pr(&gt;F) species 1 1.1101711 0.0895457 7.879642 0.001 time_point 1 0.7363935 0.0593971 5.226687 0.001 type 1 1.9027421 0.1534740 13.505059 0.001 individual 25 6.5351386 0.5271203 1.855374 0.001 Residual 15 2.1133659 0.1704628 NA NA Total 43 12.3978112 1.0000000 NA NA 4.5.3.2.3 Phylogenetic Df SumOfSqs R2 F Pr(&gt;F) species 1 0.1341431 0.1005265 6.921553 0.001 time_point 1 0.1159136 0.0868654 5.980943 0.001 type 1 0.1423573 0.1066822 7.345390 0.001 individual 25 0.6512838 0.4880704 1.344205 0.067 Residual 15 0.2907075 0.2178554 NA NA Total 43 1.3344053 1.0000000 NA NA 4.5.3.2.4 Functional Df SumOfSqs R2 F Pr(&gt;F) species 1 -0.0031096 -0.0030953 -0.1177247 0.822 time_point 1 -0.0045864 -0.0045653 -0.1736359 0.816 type 1 0.0775554 0.0771987 2.9361453 0.143 individual 25 0.5385511 0.5360739 0.8155530 0.644 Residual 15 0.3962105 0.3943880 NA NA Total 43 1.0046211 1.0000000 NA NA beta_richness_nmds_transplant3 &lt;- beta_div_richness_transplant3$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(transplant3_nmds, by = join_by(sample == Tube_code)) beta_neutral_nmds_transplant3 &lt;- beta_div_neutral_transplant3$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(transplant3_nmds, by = join_by(sample == Tube_code)) beta_phylo_nmds_transplant3 &lt;- beta_div_phylo_transplant3$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(transplant3_nmds, by = join_by(sample == Tube_code)) beta_func_nmds_transplant3 &lt;- beta_div_func_transplant3$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(transplant3_nmds, by = join_by(sample == Tube_code)) p0&lt;-beta_richness_nmds_transplant3 %&gt;% group_by(individual) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x=NMDS1,y=NMDS2, color=type, shape=time_point)) + scale_color_manual(values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + geom_point(size=2) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2), alpha=0.2) + labs(y = &quot;NMDS2&quot;, x=&quot;NMDS1 \\n Richness beta diversity&quot;) + theme_classic() + theme(legend.position=&quot;none&quot;) p1&lt;-beta_neutral_nmds_transplant3 %&gt;% group_by(individual) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x=NMDS1,y=NMDS2, color=type, shape=time_point)) + scale_color_manual(values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + geom_point(size=2) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2), alpha=0.2) + labs(y = &quot;NMDS2&quot;, x=&quot;NMDS1 \\n Neutral beta diversity&quot;) + theme_classic() + theme(legend.position=&quot;none&quot;) p2&lt;-beta_phylo_nmds_transplant3 %&gt;% group_by(individual) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x=NMDS1,y=NMDS2, color=type, shape=time_point)) + scale_color_manual(values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + geom_point(size=2) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2), alpha=0.2) + labs(y= element_blank (), x=&quot;NMDS1 \\n Phylogenetic beta diversity&quot;) + theme_classic() + theme(legend.position=&quot;none&quot;) p3&lt;-beta_func_nmds_transplant3 %&gt;% group_by(individual) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x=NMDS1,y=NMDS2, color=type, shape=time_point)) + scale_color_manual(values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + geom_point(size=2) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2), alpha=0.2) + labs(y= element_blank (), x=&quot;NMDS1 \\n Functional beta diversity&quot;) + theme_classic()+ theme(legend.position=&quot;none&quot;) 4.5.4 4. Are there differences between the control and the treatment group? 4.5.4.1 After 1 week –&gt; Post-FMT1 post1 &lt;- meta %&gt;% filter(time_point == &quot;5_Post-FMT1&quot;) post1.counts &lt;- temp_genome_counts[,which(colnames(temp_genome_counts) %in% rownames(post1))] identical(sort(colnames(post1.counts)),sort(as.character(rownames(post1)))) post1_nmds &lt;- sample_metadata %&gt;% filter(time_point == &quot;5_Post-FMT1&quot;) 4.5.4.2 Number of samples used [1] 27 beta_div_richness_post1&lt;-hillpair(data=post1.counts, q=0) beta_div_neutral_post1&lt;-hillpair(data=post1.counts, q=1) beta_div_phylo_post1&lt;-hillpair(data=post1.counts, q=1, tree=genome_tree) beta_div_func_post1&lt;-hillpair(data=post1.counts, q=1, dist=dist) 4.5.4.2.1 Richness Df SumOfSqs R2 F Pr(&gt;F) species 1 0.6488906 0.0757032 2.115638 0.002 type 1 0.5615418 0.0655126 1.830847 0.008 Residual 24 7.3610760 0.8587842 NA NA Total 26 8.5715084 1.0000000 NA NA 4.5.4.2.2 Neutral Df SumOfSqs R2 F Pr(&gt;F) species 1 0.7984743 0.104299 3.065171 0.001 type 1 0.6051778 0.079050 2.323148 0.004 Residual 24 6.2519772 0.816651 NA NA Total 26 7.6556293 1.000000 NA NA 4.5.4.2.3 Phylogenetic Df SumOfSqs R2 F Pr(&gt;F) species 1 0.0700374 0.0635900 1.6594454 0.163 type 1 0.0184254 0.0167292 0.4365646 0.785 Residual 24 1.0129278 0.9196808 NA NA Total 26 1.1013906 1.0000000 NA NA 4.5.4.2.4 Functional Df SumOfSqs R2 F Pr(&gt;F) species 1 -0.0048931 -0.0058792 -0.1628739 0.840 type 1 0.1161466 0.1395538 3.8660898 0.078 Residual 24 0.7210172 0.8663254 NA NA Total 26 0.8322707 1.0000000 NA NA beta_richness_nmds_post1 &lt;- beta_div_richness_post1$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(post1_nmds, by = join_by(sample == Tube_code)) beta_neutral_nmds_post1 &lt;- beta_div_neutral_post1$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(post1_nmds, by = join_by(sample == Tube_code)) beta_phylogenetic_nmds_post1 &lt;- beta_div_phylo_post1$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(post1_nmds, by = join_by(sample == Tube_code)) beta_functional_nmds_post1 &lt;- beta_div_func_post1$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(post1_nmds, by = join_by(sample == Tube_code)) p0&lt;-beta_richness_nmds_post1 %&gt;% group_by(type) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x=NMDS1,y=NMDS2, color=type, shape=time_point)) + scale_color_manual(values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + geom_point(size=2) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2), alpha=0.2) + labs(y = &quot;NMDS2&quot;, x=&quot;NMDS1 \\n Richness beta diversity&quot;) + theme_classic() + theme(legend.position=&quot;none&quot;) p1&lt;-beta_neutral_nmds_post1 %&gt;% group_by(type) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x=NMDS1,y=NMDS2, color=type, shape=time_point)) + scale_color_manual(values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + geom_point(size=2) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2), alpha=0.2) + labs(y = &quot;NMDS2&quot;, x=&quot;NMDS1 \\n Neutral beta diversity&quot;) + theme_classic() + theme(legend.position=&quot;none&quot;) p2&lt;-beta_phylogenetic_nmds_post1 %&gt;% group_by(type) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x=NMDS1,y=NMDS2, color=type, shape=time_point)) + scale_color_manual(values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + geom_point(size=2) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2), alpha=0.2) + labs(y= element_blank (), x=&quot;NMDS1 \\n Phylogenetic beta diversity&quot;) + theme_classic() + theme(legend.position=&quot;none&quot;) p3&lt;-beta_functional_nmds_post1 %&gt;% group_by(type) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x=NMDS1,y=NMDS2, color=type, shape=time_point)) + scale_color_manual(values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + geom_point(size=2) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2), alpha=0.2) + labs(y= element_blank (), x=&quot;NMDS1 \\n Functional beta diversity&quot;) + theme_classic()+ theme(legend.position=&quot;none&quot;) ggarrange(p0, p1, p2, p3, ncol=2, nrow=2, common.legend = TRUE, legend=&quot;right&quot;) 4.5.4.3 After 2 weeks –&gt;Post-FMT2 post2 &lt;- meta %&gt;% filter(time_point == &quot;6_Post-FMT2&quot;) post2.counts &lt;- temp_genome_counts[,which(colnames(temp_genome_counts) %in% rownames(post2))] identical(sort(colnames(post2.counts)),sort(as.character(rownames(post2)))) post2_nmds &lt;- sample_metadata %&gt;% filter(time_point == &quot;6_Post-FMT2&quot;) 4.5.4.4 Number of samples used [1] 28 beta_div_richness_post2&lt;-hillpair(data=post2.counts, q=0) beta_div_neutral_post2&lt;-hillpair(data=post2.counts, q=1) beta_div_phylo_post2&lt;-hillpair(data=post2.counts, q=1, tree=genome_tree) beta_div_func_post2&lt;-hillpair(data=post2.counts, q=1, dist=dist) 4.5.4.4.1 Richness Df SumOfSqs R2 F Pr(&gt;F) species 1 0.8966107 0.1132233 3.515588 0.001 type 1 0.6463814 0.0816245 2.534445 0.002 Residual 25 6.3759661 0.8051521 NA NA Total 27 7.9189582 1.0000000 NA NA 4.5.4.4.2 Neutral Df SumOfSqs R2 F Pr(&gt;F) species 1 0.9398968 0.1224370 4.112304 0.001 type 1 1.0227481 0.1332297 4.474800 0.001 Residual 25 5.7139316 0.7443333 NA NA Total 27 7.6765766 1.0000000 NA NA 4.5.4.4.3 Phylogenetic Df SumOfSqs R2 F Pr(&gt;F) species 1 0.1200820 0.1454923 4.647187 0.001 type 1 0.0592745 0.0718175 2.293931 0.027 Residual 25 0.6459931 0.7826902 NA NA Total 27 0.8253496 1.0000000 NA NA 4.5.4.4.4 Functional Df SumOfSqs R2 F Pr(&gt;F) species 1 0.0116738 0.0168395 0.4229082 0.521 type 1 -0.0085273 -0.0123007 -0.3089208 0.909 Residual 25 0.6900904 0.9954612 NA NA Total 27 0.6932368 1.0000000 NA NA beta_richness_nmds_post2 &lt;- beta_div_richness_post2$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(post2_nmds, by = join_by(sample == Tube_code)) beta_neutral_nmds_post2 &lt;- beta_div_neutral_post2$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(post2_nmds, by = join_by(sample == Tube_code)) beta_phylogenetic_nmds_post2 &lt;- beta_div_phylo_post2$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(post2_nmds, by = join_by(sample == Tube_code)) beta_functional_nmds_post2 &lt;- beta_div_func_post2$S %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(post2_nmds, by = join_by(sample == Tube_code)) p0&lt;-beta_richness_nmds_post2 %&gt;% group_by(type) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x=NMDS1,y=NMDS2, color=type, shape=time_point)) + scale_color_manual(values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + geom_point(size=2) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2), alpha=0.2) + labs(y = &quot;NMDS2&quot;, x=&quot;NMDS1 \\n Richness beta diversity&quot;) + theme_classic() + theme(legend.position=&quot;top&quot;) p1&lt;-beta_neutral_nmds_post2 %&gt;% group_by(type) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x=NMDS1,y=NMDS2, color=type, shape=time_point)) + scale_color_manual(values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + geom_point(size=2) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2), alpha=0.2) + labs(y = &quot;NMDS2&quot;, x=&quot;NMDS1 \\n Neutral beta diversity&quot;) + theme_classic() + theme(legend.position=&quot;none&quot;) p2&lt;-beta_phylogenetic_nmds_post2 %&gt;% group_by(type) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x=NMDS1,y=NMDS2, color=type, shape=time_point)) + scale_color_manual(values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + geom_point(size=2) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2), alpha=0.2) + labs(y= element_blank (), x=&quot;NMDS1 \\n Phylogenetic beta diversity&quot;) + theme_classic() + theme(legend.position=&quot;none&quot;) p3&lt;-beta_functional_nmds_post2 %&gt;% group_by(type) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x=NMDS1,y=NMDS2, color=type, shape=time_point)) + scale_color_manual(values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + geom_point(size=2) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2), alpha=0.2) + labs(y= element_blank (), x=&quot;NMDS1 \\n Functional beta diversity&quot;) + theme_classic()+ theme(legend.position=&quot;none&quot;) ggarrange(p0, p1, p2, p3, ncol=2, nrow=2, common.legend = TRUE, legend=&quot;right&quot;) "],["functional-differences.html", "Chapter 5 Functional differences 5.1 Data preparation 5.2 Genomes GIFT profiles 5.3 Function level 5.4 Element level 5.5 Comparison of samples from the 0 Time_point (0_Wild) 5.6 Comparison of samples from the 6th Time_point (6_Post-FMT2) 5.7 Domain level 5.8 Comparison of samples from the 6th Time_point (6_Post-FMT2)", " Chapter 5 Functional differences load(&quot;data/data.Rdata&quot;) 5.1 Data preparation # Aggregate bundle-level GIFTs into the compound level GIFTs_elements &lt;- to.elements(genome_gifts, GIFT_db) GIFTs_elements_filtered &lt;- GIFTs_elements[rownames(GIFTs_elements) %in% genome_counts$genome, ] GIFTs_elements_filtered &lt;- as.data.frame(GIFTs_elements_filtered) %&gt;% select_if(~ !is.numeric(.) || sum(.) != 0) elements &lt;- GIFTs_elements_filtered %&gt;% as.data.frame() # Aggregate element-level GIFTs into the function level GIFTs_functions &lt;- to.functions(GIFTs_elements_filtered, GIFT_db) functions &lt;- GIFTs_functions %&gt;% as.data.frame() # Aggregate function-level GIFTs into overall Biosynthesis, Degradation and Structural GIFTs GIFTs_domains &lt;- to.domains(GIFTs_functions, GIFT_db) domains &lt;- GIFTs_domains %&gt;% as.data.frame() # Get community-weighed average GIFTs per sample GIFTs_elements_community &lt;- to.community(GIFTs_elements_filtered, genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) GIFTs_functions_community &lt;- to.community(GIFTs_functions, genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) GIFTs_domains_community &lt;- to.community(GIFTs_domains, genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) uniqueGIFT_db&lt;- unique(GIFT_db[c(2,4,5,6)]) %&gt;% unite(&quot;Function&quot;,Function:Element, sep= &quot;_&quot;, remove=FALSE) 5.2 Genomes GIFT profiles GIFTs_elements %&gt;% as_tibble(., rownames = &quot;MAG&quot;) %&gt;% reshape2::melt() %&gt;% rename(Code_element = variable, GIFT = value) %&gt;% inner_join(GIFT_db,by=&quot;Code_element&quot;) %&gt;% ggplot(., aes(x=Code_element, y=MAG, fill=GIFT, group=Code_function))+ geom_tile()+ scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_fill_gradientn(colours=rev(c(&quot;#d53e4f&quot;, &quot;#f46d43&quot;, &quot;#fdae61&quot;, &quot;#fee08b&quot;, &quot;#e6f598&quot;, &quot;#abdda4&quot;, &quot;#ddf1da&quot;)))+ facet_grid(. ~ Code_function, scales = &quot;free&quot;, space = &quot;free&quot;)+ theme_grey(base_size=8)+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),strip.text.x = element_text(angle = 90)) 5.3 Function level GIFTs_functions_community %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;sample&quot;) %&gt;% pivot_longer(!sample,names_to=&quot;trait&quot;,values_to=&quot;gift&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == Tube_code)) %&gt;% ggplot(aes(x=trait,y=time_point,fill=gift)) + geom_tile(colour=&quot;white&quot;, size=0.2)+ scale_fill_gradientn(colours=rev(c(&quot;#d53e4f&quot;, &quot;#f46d43&quot;, &quot;#fdae61&quot;, &quot;#fee08b&quot;, &quot;#e6f598&quot;, &quot;#abdda4&quot;, &quot;#ddf1da&quot;)))+ facet_grid(type ~ ., scales=&quot;free&quot;,space=&quot;free&quot;) 5.4 Element level GIFTs_elements_community_merged&lt;-GIFTs_elements_community %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;sample&quot;) %&gt;% pivot_longer(!sample,names_to=&quot;trait&quot;,values_to=&quot;gift&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == Tube_code))%&gt;% mutate(functionid = substr(trait, 1, 3)) %&gt;% mutate(trait = case_when( trait %in% GIFT_db$Code_element ~ GIFT_db$Element[match(trait, GIFT_db$Code_element)], TRUE ~ trait )) %&gt;% mutate(functionid = case_when( functionid %in% GIFT_db$Code_function ~ GIFT_db$Function[match(functionid, GIFT_db$Code_function)], TRUE ~ functionid )) %&gt;% mutate(trait=factor(trait,levels=unique(GIFT_db$Element))) %&gt;% mutate(functionid=factor(functionid,levels=unique(GIFT_db$Function))) # Create an interaction variable for time_point and sample GIFTs_elements_community_merged$interaction_var &lt;- interaction(GIFTs_elements_community_merged$sample, GIFTs_elements_community_merged$time_point) ggplot(GIFTs_elements_community_merged,aes(x=interaction_var,y=trait,fill=gift)) + geom_tile(colour=&quot;white&quot;, linewidth=0.2)+ scale_fill_gradientn(colours=rev(c(&quot;#d53e4f&quot;, &quot;#f46d43&quot;, &quot;#fdae61&quot;, &quot;#fee08b&quot;, &quot;#e6f598&quot;, &quot;#abdda4&quot;, &quot;#ddf1da&quot;)))+ facet_grid(functionid ~ type, scales=&quot;free&quot;,space=&quot;free&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), strip.text.y = element_text(angle = 0)) + labs(y=&quot;Traits&quot;,x=&quot;Time_point&quot;,fill=&quot;GIFT&quot;)+ scale_x_discrete(labels = function(x) gsub(&quot;.*\\\\.&quot;, &quot;&quot;, x)) 5.5 Comparison of samples from the 0 Time_point (0_Wild) 5.5.1 GIFTs Functional community GIFTs_functions_community %&gt;% rowMeans() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == Tube_code)) %&gt;% filter(time_point==&quot;0_Wild&quot;) %&gt;% group_by(species) %&gt;% summarise(MCI = mean(value), sd = sd(value)) 5.5.1.1 GIFT test visualisation GIFTs_functions_community %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == Tube_code)) %&gt;% filter(time_point==&quot;0_Wild&quot;) %&gt;% select(c(1:21, 23)) %&gt;% pivot_longer(-c(sample,species),names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% mutate(trait = case_when( trait %in% GIFT_db$Code_function ~ GIFT_db$Function[match(trait, GIFT_db$Code_function)], TRUE ~ trait )) %&gt;% mutate(trait=factor(trait,levels=unique(GIFT_db$Function))) %&gt;% ggplot(aes(x=value, y=species, group=species, fill=species, color=species)) + geom_boxplot() + scale_color_manual(name=&quot;species&quot;, breaks=c(&quot;Podarcis_liolepis&quot;,&quot;Podarcis_muralis&quot;), labels=c(&quot;Podarcis liolepis&quot;,&quot;Podarcis muralis&quot;), values=c(&quot;#e5bd5b&quot;,&quot;#6b7398&quot;)) + scale_fill_manual(name=&quot;species&quot;, breaks=c(&quot;Podarcis_liolepis&quot;,&quot;Podarcis_muralis&quot;), labels=c(&quot;Podarcis liolepis&quot;,&quot;Podarcis muralis&quot;), values=c(&quot;#e5bd5b50&quot;,&quot;#6b739850&quot;)) + facet_grid(trait ~ ., space=&quot;free&quot;, scales=&quot;free&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), strip.text.y = element_text(angle = 0)) + labs(y=&quot;Traits&quot;,x=&quot;Metabolic capacity index&quot;) 5.5.2 GIFTs Domain community GIFTs_domains_community %&gt;% rowMeans() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == Tube_code)) %&gt;% filter(time_point==&quot;0_Wild&quot;) %&gt;% group_by(species) %&gt;% summarise(MCI = mean(value), sd = sd(value)) 5.5.3 GIFTs Elements community GIFTs_elements_community %&gt;% rowMeans() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == Tube_code)) %&gt;% filter(time_point==&quot;0_Wild&quot;) %&gt;% group_by(species) %&gt;% summarise(MCI = mean(value), sd = sd(value)) sample_metadata_wild &lt;- sample_metadata%&gt;% filter(time_point == &quot;0_Wild&quot;) element_gift_wild &lt;- GIFTs_elements_community %&gt;% as.data.frame() %&gt;% rownames_to_column(., &quot;Tube_code&quot;) %&gt;% inner_join(., sample_metadata_wild[c(1,3)], by=&quot;Tube_code&quot;) # Find numeric columns numeric_cols &lt;- sapply(element_gift_wild, is.numeric) # Calculate column sums for numeric columns only col_sums_numeric &lt;- colSums(element_gift_wild[, numeric_cols]) # Identify numeric columns with sums not equal to zero nonzero_numeric_cols &lt;- names(col_sums_numeric)[col_sums_numeric != 0] # Remove numeric columns with sums not equal to zero filtered_data &lt;- element_gift_wild[, !numeric_cols | colnames(element_gift_wild) %in% nonzero_numeric_cols] significant_elements_wild &lt;- filtered_data %&gt;% pivot_longer(-c(Tube_code,species), names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(p_value = wilcox.test(value ~ species, exact=FALSE)$p.value) %&gt;% mutate(p_adjust=p.adjust(p_value, method=&quot;BH&quot;)) %&gt;% filter(p_adjust &lt; 0.05) %&gt;% left_join(.,uniqueGIFT_db[c(1,3)],by = join_by(trait == Code_element)) element_gift_t &lt;- element_gift_wild %&gt;% dplyr::select(-c(species)) %&gt;% t() %&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;trait&quot;) element_gift_filt &lt;- subset(element_gift_t, trait %in% significant_elements_wild$trait) %&gt;% t() %&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;Tube_code&quot;)%&gt;% left_join(., sample_metadata_wild[c(1,3)], by = join_by(Tube_code == Tube_code)) element_gift_filt %&gt;% dplyr::select(-Tube_code)%&gt;% group_by(species) %&gt;% summarise(across(everything(), mean))%&gt;% t() %&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;Elements&quot;) %&gt;% left_join(.,uniqueGIFT_db[c(1,3)],by = join_by(Elements == Code_element)) element_gift_names &lt;- element_gift_filt%&gt;% dplyr::select(-species)%&gt;% t() %&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;Elements&quot;) %&gt;% left_join(.,uniqueGIFT_db[c(1,3)],by = join_by(Elements == Code_element))%&gt;% dplyr::select(-Elements)%&gt;% dplyr::select(Function, everything())%&gt;% t()%&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;Tube_code&quot;)%&gt;% left_join(., sample_metadata_wild[c(1,3)], by = join_by(Tube_code == Tube_code)) colNames &lt;- names(element_gift_names)[2:36] #always check names(element_gift_names) first to know were your traits finish for(i in colNames){ plt &lt;- ggplot(element_gift_names, aes(x=species, y=.data[[i]], color = species)) + geom_boxplot(alpha = 0.2, outlier.shape = NA, width = 0.3, show.legend = FALSE) + geom_jitter(width = 0.1, show.legend = TRUE) + theme_minimal() + theme( axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank()) print(plt) } 5.6 Comparison of samples from the 6th Time_point (6_Post-FMT2) 5.6.1 GIFTs Functional community GIFTs_functions_community %&gt;% rowMeans() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == Tube_code)) %&gt;% filter(time_point==&quot;6_Post-FMT2&quot;) %&gt;% group_by(type) %&gt;% summarise(MCI = mean(value), sd = sd(value)) 5.6.1.1 GIFT test visualisation GIFTs_functions_community %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == Tube_code)) %&gt;% filter(time_point==&quot;6_Post-FMT2&quot;) %&gt;% select(c(1:21, 27)) %&gt;% pivot_longer(-c(sample,type),names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% mutate(trait = case_when( trait %in% GIFT_db$Code_function ~ GIFT_db$Function[match(trait, GIFT_db$Code_function)], TRUE ~ trait )) %&gt;% mutate(trait=factor(trait,levels=unique(GIFT_db$Function))) %&gt;% ggplot(aes(x=value, y=type, group=type, fill=type, color=type)) + geom_boxplot() + scale_color_manual(name=&quot;type&quot;, breaks=c(&quot;Control&quot;,&quot;Hot_control&quot;, &quot;Treatment&quot;), labels=c(&quot;Control&quot;,&quot;Hot control&quot;, &quot;Treatment&quot;), values=c(&quot;#76b183&quot;,&quot;#d57d2c&quot;, &quot;#4477AA&quot;)) + scale_fill_manual(name=&quot;type&quot;, breaks=c(&quot;Control&quot;,&quot;Hot_control&quot;, &quot;Treatment&quot;), labels=c(&quot;Control&quot;,&quot;Hot control&quot;, &quot;Treatment&quot;), values=c(&quot;#76b18350&quot;,&quot;#d57d2c50&quot;, &quot;#4477AA50&quot;)) + facet_grid(trait ~ ., space=&quot;free&quot;, scales=&quot;free&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), strip.text.y = element_text(angle = 0)) + labs(y=&quot;Traits&quot;,x=&quot;Metabolic capacity index&quot;) 5.6.2 GIFTs Domain community GIFTs_domains_community %&gt;% rowMeans() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == Tube_code)) %&gt;% filter(time_point==&quot;6_Post-FMT2&quot;) %&gt;% group_by(type) %&gt;% summarise(MCI = mean(value), sd = sd(value)) 5.6.3 GIFTs Elements community GIFTs_elements_community %&gt;% rowMeans() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == Tube_code)) %&gt;% filter(time_point==&quot;6_Post-FMT2&quot;) %&gt;% group_by(type) %&gt;% summarise(MCI = mean(value), sd = sd(value)) sample_metadata_TM6 &lt;- sample_metadata%&gt;% filter(time_point == &quot;6_Post-FMT2&quot;)%&gt;% filter(type != &quot;Hot_control&quot;) element_gift_TM6 &lt;- GIFTs_elements_community %&gt;% as.data.frame() %&gt;% rownames_to_column(., &quot;Tube_code&quot;) %&gt;% inner_join(sample_metadata_TM6 %&gt;% select(1, 7), by = &quot;Tube_code&quot;) # Find numeric columns numeric_cols &lt;- sapply(element_gift_TM6, is.numeric) # Calculate column sums for numeric columns only col_sums_numeric &lt;- colSums(element_gift_TM6[, numeric_cols]) # Identify numeric columns with sums not equal to zero nonzero_numeric_cols &lt;- names(col_sums_numeric)[col_sums_numeric != 0] # Remove numeric columns with sums not equal to zero filtered_data &lt;- element_gift_TM6[, !numeric_cols | colnames(element_gift_TM6) %in% nonzero_numeric_cols] significant_elements_TM6 &lt;- filtered_data %&gt;% pivot_longer(-c(Tube_code,type), names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(p_value = wilcox.test(value ~ type, exact=FALSE)$p.value) %&gt;% mutate(p_adjust=p.adjust(p_value, method=&quot;BH&quot;)) %&gt;% filter(p_value &lt; 0.05) %&gt;% #take into account that p_value is used and not p_adjust left_join(.,uniqueGIFT_db[c(1,3)],by = join_by(trait == Code_element)) element_gift_t &lt;- element_gift_TM6 %&gt;% dplyr::select(-c(type)) %&gt;% t() %&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;trait&quot;) element_gift_filt &lt;- subset(element_gift_t, trait %in% significant_elements_TM6$trait) %&gt;% t() %&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;Tube_code&quot;)%&gt;% left_join(., sample_metadata_TM6[c(1,7)], by = join_by(Tube_code == Tube_code)) element_gift_filt %&gt;% dplyr::select(-Tube_code)%&gt;% group_by(type) %&gt;% summarise(across(everything(), mean))%&gt;% t() %&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;Elements&quot;) %&gt;% left_join(.,uniqueGIFT_db[c(1,3)],by = join_by(Elements == Code_element)) element_gift_names &lt;- element_gift_filt%&gt;% dplyr::select(-type)%&gt;% t() %&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;Elements&quot;) %&gt;% left_join(.,uniqueGIFT_db[c(1,3)],by = join_by(Elements == Code_element))%&gt;% dplyr::select(-Elements)%&gt;% dplyr::select(Function, everything())%&gt;% t()%&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(., &quot;Tube_code&quot;)%&gt;% left_join(., sample_metadata_TM6[c(1,7)], by = join_by(Tube_code == Tube_code)) colNames &lt;- names(element_gift_names)[2:20] #always check names(element_gift_names) first to now were your traits finish for(i in colNames){ plt &lt;- ggplot(element_gift_names, aes(x=type, y=.data[[i]], color = type)) + geom_boxplot(alpha = 0.2, outlier.shape = NA, width = 0.3, show.legend = FALSE) + geom_jitter(width = 0.1, show.legend = TRUE) + theme_minimal() + theme( axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank()) print(plt) } 5.7 Domain level 5.7.1 Comparison of samples from the 0 Time_point (0_Wild) #Merge the functional domains with the metadata merge_gift_wild&lt;- GIFTs_domains_community %&gt;% as.data.frame() %&gt;% rownames_to_column(., &quot;Tube_code&quot;) %&gt;% inner_join(., sample_metadata_wild, by=&quot;Tube_code&quot;) #Biosynthesis p1 &lt;-merge_gift_wild %&gt;% ggplot(aes(x=species,y=Biosynthesis,color=species,fill=species))+ geom_jitter(width = 0.2, size = 1.5, show.legend = FALSE)+ geom_boxplot(alpha=0.2,outlier.shape = NA, width = 0.5, show.legend = FALSE, coef=0)+ stat_compare_means() + theme(axis.text.x = element_text(vjust = 0.5, size=10), axis.text.y = element_text(size=10), axis.title=element_text(size=12,face=&quot;bold&quot;), axis.text = element_text(face=&quot;bold&quot;, size=18), panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size=10), legend.title = element_text(size=12), legend.position=&quot;none&quot;, legend.key.size = unit(1, &#39;cm&#39;), strip.text.x = element_text(size = 12, color = &quot;black&quot;, face = &quot;bold&quot;))+ labs( x = &quot;Species&quot;) #Degradation p2 &lt;-merge_gift_wild %&gt;% ggplot(aes(x=species,y=Degradation,color=species,fill=species))+ geom_jitter(width = 0.2, size = 1.45, show.legend = FALSE)+ geom_boxplot(alpha=0.2,outlier.shape = NA, width = 0.5, show.legend = FALSE, coef=0)+ stat_compare_means() + theme(axis.text.x = element_text(vjust = 0.5, size=10), axis.text.y = element_text(size=10), axis.title=element_text(size=12,face=&quot;bold&quot;), panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size=10), legend.title = element_text(size=12), legend.position=&quot;none&quot;, legend.key.size = unit(1, &#39;cm&#39;), strip.text.x = element_text(size = 12, color = &quot;black&quot;, face = &quot;bold&quot;))+ labs( x = &quot;Species&quot;) #Structure p3 &lt;-merge_gift_wild %&gt;% ggplot(aes(x=species,y=Structure,color=species,fill=species))+ geom_jitter(width = 0.2, size = 1.5, show.legend = FALSE)+ geom_boxplot(alpha=0.2,outlier.shape = NA, width = 0.5, show.legend = FALSE, coef=0)+ stat_compare_means() + theme(axis.text.x = element_text(vjust = 3, size=10), axis.text.y = element_text(size=10), axis.title=element_text(size=12,face=&quot;bold&quot;), axis.text = element_text(face=&quot;bold&quot;, size=18), panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size=10), legend.title = element_text(size=12), legend.position=&quot;none&quot;, legend.key.size = unit(1, &#39;cm&#39;), strip.text.x = element_text(size = 12, color = &quot;black&quot;, face = &quot;bold&quot;))+ labs( x = &quot;Species&quot;) #Overall p4 &lt;-merge_gift_wild %&gt;% ggplot(aes(x=species,y=Overall,color=species,fill=species))+ geom_jitter(width = 0.2, size = 1.5, show.legend = FALSE)+ geom_boxplot(alpha=0.2,outlier.shape = NA, width = 0.5, show.legend = FALSE, coef=0)+ stat_compare_means() + theme(axis.text.x = element_text(vjust = 0.5, size=10), axis.text.y = element_text(size=10), axis.title=element_text(size=12,face=&quot;bold&quot;), axis.text = element_text(face=&quot;bold&quot;, size=18), panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size=10), legend.title = element_text(size=12), legend.position=&quot;none&quot;, legend.key.size = unit(1, &#39;cm&#39;), strip.text.x = element_text(size = 12, color = &quot;black&quot;, face = &quot;bold&quot;))+ labs( x = &quot;Species&quot;) 5.8 Comparison of samples from the 6th Time_point (6_Post-FMT2) #Merge the functional domains with the metadata merge_gift_TM6 &lt;- GIFTs_domains_community %&gt;% as.data.frame() %&gt;% rownames_to_column(., &quot;Tube_code&quot;) %&gt;% inner_join(., sample_metadata_TM6, by=&quot;Tube_code&quot;) #Biosynthesis p1 &lt;-merge_gift_TM6 %&gt;% ggplot(aes(x=type,y=Biosynthesis,color=type,fill=type))+ geom_jitter(width = 0.2, size = 1.5, show.legend = FALSE)+ geom_boxplot(alpha=0.2,outlier.shape = NA, width = 0.5, show.legend = FALSE, coef=0)+ stat_compare_means() + theme(axis.text.x = element_text(vjust = 0.5, size=10), axis.text.y = element_text(size=10), axis.title=element_text(size=12,face=&quot;bold&quot;), axis.text = element_text(face=&quot;bold&quot;, size=18), panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size=10), legend.title = element_text(size=12), legend.position=&quot;none&quot;, legend.key.size = unit(1, &#39;cm&#39;), strip.text.x = element_text(size = 12, color = &quot;black&quot;, face = &quot;bold&quot;))+ labs( x = &quot;Type&quot;) #Degradation p2 &lt;-merge_gift_TM6 %&gt;% ggplot(aes(x=type,y=Degradation,color=type,fill=type))+ geom_jitter(width = 0.2, size = 1.5, show.legend = FALSE)+ geom_boxplot(alpha=0.2,outlier.shape = NA, width = 0.5, show.legend = FALSE, coef=0)+ stat_compare_means() + theme(axis.text.x = element_text(vjust = 0.5, size=10), axis.text.y = element_text(size=10), axis.title=element_text(size=12,face=&quot;bold&quot;), axis.text = element_text(face=&quot;bold&quot;, size=18), panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size=10), legend.title = element_text(size=12), legend.position=&quot;none&quot;, legend.key.size = unit(1, &#39;cm&#39;), strip.text.x = element_text(size = 12, color = &quot;black&quot;, face = &quot;bold&quot;))+ labs( x = &quot;type&quot;) #Structure p3 &lt;-merge_gift_TM6 %&gt;% ggplot(aes(x=type,y=Structure,color=type,fill=type))+ geom_jitter(width = 0.2, size = 1.5, show.legend = FALSE)+ geom_boxplot(alpha=0.2,outlier.shape = NA, width = 0.5, show.legend = FALSE, coef=0)+ stat_compare_means() + theme(axis.text.x = element_text(vjust = 3, size=10), axis.text.y = element_text(size=10), axis.title=element_text(size=12,face=&quot;bold&quot;), axis.text = element_text(face=&quot;bold&quot;, size=18), panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size=10), legend.title = element_text(size=12), legend.position=&quot;none&quot;, legend.key.size = unit(1, &#39;cm&#39;), strip.text.x = element_text(size = 12, color = &quot;black&quot;, face = &quot;bold&quot;))+ labs( x = &quot;type&quot;) #Overall p4 &lt;-merge_gift_TM6 %&gt;% ggplot(aes(x=type,y=Overall,color=type,fill=type))+ geom_jitter(width = 0.2, size = 1.5, show.legend = FALSE)+ geom_boxplot(alpha=0.2,outlier.shape = NA, width = 0.5, show.legend = FALSE, coef=0)+ stat_compare_means() + theme(axis.text.x = element_text(vjust = 0.5, size=10), axis.text.y = element_text(size=10), axis.title=element_text(size=12,face=&quot;bold&quot;), axis.text = element_text(face=&quot;bold&quot;, size=18), panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size=10), legend.title = element_text(size=12), legend.position=&quot;none&quot;, legend.key.size = unit(1, &#39;cm&#39;), strip.text.x = element_text(size = 12, color = &quot;black&quot;, face = &quot;bold&quot;))+ labs( x = &quot;type&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
